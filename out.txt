> Task :compileJava UP-TO-DATE
> Task :processResources UP-TO-DATE
> Task :classes UP-TO-DATE
> Task :compileTestJava
> Task :processTestResources NO-SOURCE
> Task :testClasses

> Task :test

csc366.jpademo.Demo5 STANDARD_OUT
    23:29:29.021 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
    23:29:29.037 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
    23:29:29.085 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [csc366.jpademo.Demo5] from class [org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper]
    23:29:29.105 [Test worker] INFO org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [csc366.jpademo.Demo5], using SpringBootContextLoader
    23:29:29.111 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [csc366.jpademo.Demo5]: class path resource [csc366/jpademo/Demo5-context.xml] does not exist
    23:29:29.111 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [csc366.jpademo.Demo5]: class path resource [csc366/jpademo/Demo5Context.groovy] does not exist
    23:29:29.112 [Test worker] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [csc366.jpademo.Demo5]: no resource found for suffixes {-context.xml, Context.groovy}.
    23:29:29.113 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [csc366.jpademo.Demo5]: Demo5 does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
    23:29:29.193 [Test worker] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [csc366.jpademo.Demo5]
    23:29:29.276 [Test worker] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/home/ncpalmie/School/Migler366/final_proj/366-Database-Project/build/classes/java/main/csc366/jpademo/JpaDemoApplication.class]
    23:29:29.285 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration csc366.jpademo.JpaDemoApplication for test class csc366.jpademo.Demo5
    23:29:29.287 [Test worker] DEBUG org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - @TestExecutionListeners is not present for class [csc366.jpademo.Demo5]: using defaults.
    23:29:29.287 [Test worker] INFO org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
    23:29:29.308 [Test worker] INFO org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@16ff45cf, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@735e5089, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@38cf0bf0, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@42b4682c, org.springframework.test.context.support.DirtiesContextTestExecutionListener@2e099c88, org.springframework.test.context.transaction.TransactionalTestExecutionListener@2fd24bd8, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@6f024559, org.springframework.test.context.event.EventPublishingTestExecutionListener@e96a59d, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@6c99851b, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@51288fdb, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@2cfd202a, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@177cc265, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@376d3ccc]
    23:29:29.312 [Test worker] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@160cccbf testClass = Demo5, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1e04cdbe testClass = Demo5, locations = '{}', classes = '{class csc366.jpademo.JpaDemoApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{spring.main.banner-mode=off, logging.level.root=ERROR, logging.level.csc366=DEBUG, spring.jpa.hibernate.ddl-auto=update, spring.datasource.url=jdbc:mysql://mysql.labthreesixsix.com/csc366, spring.datasource.username=jpa, spring.datasource.password=demo, logging.level.org.hibernate.SQL=DEBUG, logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE, spring.jpa.properties.hibernate.format_sql=true, spring.jpa.show-sql=false, spring.jpa.properties.hibernate.show_sql=false, logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n, org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@4dfa2a41, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@d814fdcb, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@49132e28, [ImportsContextCustomizer@18847305 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@52b5cdb4, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@25c9f04d, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
    23:29:29.327 [Test worker] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@160cccbf testClass = Demo5, testInstance = csc366.jpademo.Demo5@19ea4496, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1e04cdbe testClass = Demo5, locations = '{}', classes = '{class csc366.jpademo.JpaDemoApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{spring.main.banner-mode=off, logging.level.root=ERROR, logging.level.csc366=DEBUG, spring.jpa.hibernate.ddl-auto=update, spring.datasource.url=jdbc:mysql://mysql.labthreesixsix.com/csc366, spring.datasource.username=jpa, spring.datasource.password=demo, logging.level.org.hibernate.SQL=DEBUG, logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE, spring.jpa.properties.hibernate.format_sql=true, spring.jpa.show-sql=false, spring.jpa.properties.hibernate.show_sql=false, logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n, org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@4dfa2a41, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@d814fdcb, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@49132e28, [ImportsContextCustomizer@18847305 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@52b5cdb4, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@25c9f04d, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]]].
    23:29:29.445 [Test worker] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, spring.main.banner-mode=off, logging.level.root=ERROR, logging.level.csc366=DEBUG, spring.jpa.hibernate.ddl-auto=update, spring.datasource.url=jdbc:mysql://mysql.labthreesixsix.com/csc366, spring.datasource.username=jpa, spring.datasource.password=demo, logging.level.org.hibernate.SQL=DEBUG, logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE, spring.jpa.properties.hibernate.format_sql=true, spring.jpa.show-sql=false, spring.jpa.properties.hibernate.show_sql=false, logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n, org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true, server.port=-1}
    2020-06-10 23:29:29 - Starting Demo5 on Devon with PID 24302 (started by ncpalmie in /home/ncpalmie/School/Migler366/final_proj/366-Database-Project)
    2020-06-10 23:29:29 - Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
    2020-06-10 23:29:29 - No active profile set, falling back to default profiles: default
    2020-06-10 23:29:32 - 
    
        create table address (
           id bigint generated by default as identity,
            city varchar(255),
            state varchar(255),
            street varchar(255),
            zip_code varchar(255),
            person_id bigint,
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table audit (
           id bigint generated by default as identity,
            auditid varchar(255) not null,
            audit_type varchar(255),
            date varchar(255),
            regulator_id bigint,
            store_id bigint,
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table owner (
           id bigint generated by default as identity,
            dob varchar(255),
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            phone varchar(255),
            ssn varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table packaged_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table person (
           id bigint generated by default as identity,
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table raw_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table regulator (
           id bigint generated by default as identity,
            agency varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            position varchar(255),
            regulatorid varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table store (
           id bigint generated by default as identity,
            location varchar(255),
            phone varchar(255),
            storeid varchar(255) not null,
            store_size varchar(255),
            owner bigint,
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table supplier (
           id bigint generated by default as identity,
            email varchar(255),
            phone varchar(255),
            supplierid varchar(255) not null,
            supplier_name varchar(255),
            supplier_type varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        create table supply_contract (
           id bigint generated by default as identity,
            contractid varchar(255) not null,
            delivery_amount integer,
            delivery_frequency varchar(255),
            end_date timestamp,
            packaged_itemid varchar(255),
            start_date timestamp,
            raw_item varchar(255),
            supplier bigint,
            primary key (id)
        )
    2020-06-10 23:29:32 - 
    
        alter table audit 
           drop constraint if exists UK_ep28asefanvvvmhh8k2jqqejb
    2020-06-10 23:29:32 - 
    
        alter table audit 
           add constraint UK_ep28asefanvvvmhh8k2jqqejb unique (auditid)
    2020-06-10 23:29:32 - 
    
        alter table owner 
           drop constraint if exists UKtip4jka4tc5h0f77saa1vf1v8
    2020-06-10 23:29:32 - 
    
        alter table owner 
           add constraint UKtip4jka4tc5h0f77saa1vf1v8 unique (last_name, first_name)
    2020-06-10 23:29:32 - 
    
        alter table owner 
           drop constraint if exists UK_kcaoebbgb82ro5cw9nqhw19qb
    2020-06-10 23:29:32 - 
    
        alter table owner 
           add constraint UK_kcaoebbgb82ro5cw9nqhw19qb unique (email)
    2020-06-10 23:29:32 - 
    
        alter table owner 
           drop constraint if exists UK_hqy0j6l67wy4mivwqgafpjiub
    2020-06-10 23:29:32 - 
    
        alter table owner 
           add constraint UK_hqy0j6l67wy4mivwqgafpjiub unique (ssn)
    2020-06-10 23:29:32 - 
    
        alter table packaged_item 
           drop constraint if exists UKokybeh1jvrvvr8vv3xjqxeb9h
    2020-06-10 23:29:32 - 
    
        alter table packaged_item 
           add constraint UKokybeh1jvrvvr8vv3xjqxeb9h unique (itemid)
    2020-06-10 23:29:32 - 
    
        alter table packaged_item 
           drop constraint if exists UK_5y73ntbiqf6gbas6iu3lpxib1
    2020-06-10 23:29:32 - 
    
        alter table packaged_item 
           add constraint UK_5y73ntbiqf6gbas6iu3lpxib1 unique (item_name)
    2020-06-10 23:29:32 - 
    
        alter table person 
           drop constraint if exists UK6wjuvbalf4x2thqkfxejnlbvh
    2020-06-10 23:29:32 - 
    
        alter table person 
           add constraint UK6wjuvbalf4x2thqkfxejnlbvh unique (last_name, first_name)
    2020-06-10 23:29:32 - 
    
        alter table person 
           drop constraint if exists UK_fwmwi44u55bo4rvwsv0cln012
    2020-06-10 23:29:32 - 
    
        alter table person 
           add constraint UK_fwmwi44u55bo4rvwsv0cln012 unique (email)
    2020-06-10 23:29:32 - 
    
        alter table person 
           drop constraint if exists UK_6atyavdanbj9pwrbrod7irb2x
    2020-06-10 23:29:32 - 
    
        alter table person 
           add constraint UK_6atyavdanbj9pwrbrod7irb2x unique (last_name)
    2020-06-10 23:29:32 - 
    
        alter table raw_item 
           drop constraint if exists UKglpy5hi0nls6mhkcxpw6n8503
    2020-06-10 23:29:32 - 
    
        alter table raw_item 
           add constraint UKglpy5hi0nls6mhkcxpw6n8503 unique (itemid)
    2020-06-10 23:29:32 - 
    
        alter table raw_item 
           drop constraint if exists UK_sqhmohafu04jvwfkhkc2k84fr
    2020-06-10 23:29:32 - 
    
        alter table raw_item 
           add constraint UK_sqhmohafu04jvwfkhkc2k84fr unique (item_name)
    2020-06-10 23:29:32 - 
    
        alter table regulator 
           drop constraint if exists UKiim3poi4o2q61dw86ii1bg30w
    2020-06-10 23:29:33 - 
    
        alter table regulator 
           add constraint UKiim3poi4o2q61dw86ii1bg30w unique (last_name, first_name)
    2020-06-10 23:29:33 - 
    
        alter table regulator 
           drop constraint if exists UK_ggk93790o3f71axji1uef2bbl
    2020-06-10 23:29:33 - 
    
        alter table regulator 
           add constraint UK_ggk93790o3f71axji1uef2bbl unique (agency)
    2020-06-10 23:29:33 - 
    
        alter table regulator 
           drop constraint if exists UK_94s6c2q82qde1vvrxf10blwdp
    2020-06-10 23:29:33 - 
    
        alter table regulator 
           add constraint UK_94s6c2q82qde1vvrxf10blwdp unique (regulatorid)
    2020-06-10 23:29:33 - 
    
        alter table store 
           drop constraint if exists UKmwicjgpv36mj36ktnv70cihix
    2020-06-10 23:29:33 - 
    
        alter table store 
           add constraint UKmwicjgpv36mj36ktnv70cihix unique (storeid)
    2020-06-10 23:29:33 - 
    
        alter table store 
           drop constraint if exists UK_sgv7034urjkrsq9v914ruc70n
    2020-06-10 23:29:33 - 
    
        alter table store 
           add constraint UK_sgv7034urjkrsq9v914ruc70n unique (location)
    2020-06-10 23:29:33 - 
    
        alter table store 
           drop constraint if exists UK_t628hr0thqcknea2eb14y58jp
    2020-06-10 23:29:33 - 
    
        alter table store 
           add constraint UK_t628hr0thqcknea2eb14y58jp unique (phone)
    2020-06-10 23:29:33 - 
    
        alter table supplier 
           drop constraint if exists UKtlmhbkp5j7b6wcx66rdksgbbn
    2020-06-10 23:29:33 - 
    
        alter table supplier 
           add constraint UKtlmhbkp5j7b6wcx66rdksgbbn unique (supplierid)
    2020-06-10 23:29:33 - 
    
        alter table supplier 
           drop constraint if exists UK_g7qiwwu4vpciysmeeyme9gg1d
    2020-06-10 23:29:33 - 
    
        alter table supplier 
           add constraint UK_g7qiwwu4vpciysmeeyme9gg1d unique (email)
    2020-06-10 23:29:33 - 
    
        alter table supplier 
           drop constraint if exists UK_odw8hcb1lettg4mqax263yyb5
    2020-06-10 23:29:33 - 
    
        alter table supplier 
           add constraint UK_odw8hcb1lettg4mqax263yyb5 unique (phone)
    2020-06-10 23:29:33 - 
    
        alter table supply_contract 
           drop constraint if exists UK3vgl9l4d7ndv3i7njcyifhenn
    2020-06-10 23:29:33 - 
    
        alter table supply_contract 
           add constraint UK3vgl9l4d7ndv3i7njcyifhenn unique (contractid)
    2020-06-10 23:29:33 - 
    
        alter table supply_contract 
           drop constraint if exists UK_jastj09agjf6hy7sbpohv3n09
    2020-06-10 23:29:33 - 
    
        alter table supply_contract 
           add constraint UK_jastj09agjf6hy7sbpohv3n09 unique (packaged_itemid)
    2020-06-10 23:29:33 - 
    
        alter table address 
           add constraint FK81ihijcn1kdfwffke0c0sjqeb 
           foreign key (person_id) 
           references person
    2020-06-10 23:29:33 - 
    
        alter table audit 
           add constraint FKqqla6mr0dqkcrp95lpge233fa 
           foreign key (regulator_id) 
           references regulator
    2020-06-10 23:29:33 - 
    
        alter table audit 
           add constraint FKb1grfs42thryxjen70htyfc6q 
           foreign key (store_id) 
           references store
    2020-06-10 23:29:33 - 
    
        alter table store 
           add constraint FKrbk5w58pfolgn0gilf1dseh47 
           foreign key (owner) 
           references owner
    2020-06-10 23:29:33 - 
    
        alter table supply_contract 
           add constraint FKjsx88cjg04kfcha6twx6udox8 
           foreign key (raw_item) 
           references raw_item (itemid)
    2020-06-10 23:29:33 - 
    
        alter table supply_contract 
           add constraint FKecfwadtr8g2i6vw3rowm1s7hp 
           foreign key (supplier) 
           references supplier
    2020-06-10 23:29:34 - Started Demo5 in 4.607 seconds (JVM running for 6.085)

csc366.jpademo.Demo5 > testOwnerAndStore() STANDARD_OUT
    2020-06-10 23:29:34 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:34 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:34 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:34 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:34 - binding parameter [2] as [BIGINT] - [1]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:34 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]]]

csc366.jpademo.Demo5 > testOwnerAndStore() PASSED

csc366.jpademo.Demo5 > testOwnerAndStoreQuery() STANDARD_OUT
    2020-06-10 23:29:34 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:34 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:34 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:34 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:34 - binding parameter [2] as [BIGINT] - [2]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:34 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [Jane]

csc366.jpademo.Demo5 > testOwnerAndStoreQuery() PASSED

csc366.jpademo.Demo5 > testRemoveStore() STANDARD_OUT
    2020-06-10 23:29:34 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:34 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:34 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:34 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:34 - binding parameter [2] as [BIGINT] - [3]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:34 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[]]

csc366.jpademo.Demo5 > testRemoveStore() PASSED

csc366.jpademo.Demo5 > testRemoveStoreAndFlush() STANDARD_OUT
    2020-06-10 23:29:34 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:34 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:34 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:34 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:34 - binding parameter [2] as [BIGINT] - [4]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:34 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - 
        delete 
        from
            store 
        where
            id=?
    2020-06-10 23:29:34 - binding parameter [1] as [BIGINT] - [4]
    2020-06-10 23:29:34 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[]]

csc366.jpademo.Demo5 > testRemoveStoreAndFlush() PASSED

csc366.jpademo.Demo5 > testJpqlJoin() STANDARD_OUT
    2020-06-10 23:29:34 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:34 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:34 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:34 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:34 - binding parameter [2] as [BIGINT] - [5]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:34 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        inner join
            store stores1_ 
                on owner0_.id=stores1_.owner 
        where
            owner0_.first_name=? 
            or owner0_.last_name=?
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]]]
    2020-06-10 23:29:34 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [123 Outer Dr]
    2020-06-10 23:29:34 - binding parameter [2] as [BIGINT] - [5]
    2020-06-10 23:29:34 - binding parameter [3] as [VARCHAR] - [0987654321]
    2020-06-10 23:29:34 - binding parameter [4] as [VARCHAR] - [Store2]
    2020-06-10 23:29:34 - binding parameter [5] as [VARCHAR] - [100 sqft]
    2020-06-10 23:29:34 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        inner join
            store stores1_ 
                on owner0_.id=stores1_.owner 
        where
            owner0_.first_name=? 
            or owner0_.last_name=?
    2020-06-10 23:29:34 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:34 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]], Store[Store2,0987654321,123 Outer Dr,100 sqft,audits=[]]]]

csc366.jpademo.Demo5 > testJpqlJoin() PASSED

csc366.jpademo.Demo2 STANDARD_OUT
    2020-06-10 23:29:34 - Starting Demo2 on Devon with PID 24302 (started by ncpalmie in /home/ncpalmie/School/Migler366/final_proj/366-Database-Project)
    2020-06-10 23:29:34 - Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
    2020-06-10 23:29:34 - No active profile set, falling back to default profiles: default
    2020-06-10 23:29:34 - 
    
        create table address (
           id bigint generated by default as identity,
            city varchar(255),
            state varchar(255),
            street varchar(255),
            zip_code varchar(255),
            person_id bigint,
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table audit (
           id bigint generated by default as identity,
            auditid varchar(255) not null,
            audit_type varchar(255),
            date varchar(255),
            regulator_id bigint,
            store_id bigint,
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table owner (
           id bigint generated by default as identity,
            dob varchar(255),
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            phone varchar(255),
            ssn varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table packaged_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table person (
           id bigint generated by default as identity,
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table raw_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table regulator (
           id bigint generated by default as identity,
            agency varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            position varchar(255),
            regulatorid varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table store (
           id bigint generated by default as identity,
            location varchar(255),
            phone varchar(255),
            storeid varchar(255) not null,
            store_size varchar(255),
            owner bigint,
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table supplier (
           id bigint generated by default as identity,
            email varchar(255),
            phone varchar(255),
            supplierid varchar(255) not null,
            supplier_name varchar(255),
            supplier_type varchar(255),
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        create table supply_contract (
           id bigint generated by default as identity,
            contractid varchar(255) not null,
            delivery_amount integer,
            delivery_frequency varchar(255),
            end_date timestamp,
            packaged_itemid varchar(255),
            start_date timestamp,
            raw_item varchar(255),
            supplier bigint,
            primary key (id)
        )
    2020-06-10 23:29:34 - 
    
        alter table audit 
           drop constraint if exists UK_ep28asefanvvvmhh8k2jqqejb
    2020-06-10 23:29:34 - 
    
        alter table audit 
           add constraint UK_ep28asefanvvvmhh8k2jqqejb unique (auditid)
    2020-06-10 23:29:34 - 
    
        alter table owner 
           drop constraint if exists UKtip4jka4tc5h0f77saa1vf1v8
    2020-06-10 23:29:34 - 
    
        alter table owner 
           add constraint UKtip4jka4tc5h0f77saa1vf1v8 unique (last_name, first_name)
    2020-06-10 23:29:34 - 
    
        alter table owner 
           drop constraint if exists UK_kcaoebbgb82ro5cw9nqhw19qb
    2020-06-10 23:29:34 - 
    
        alter table owner 
           add constraint UK_kcaoebbgb82ro5cw9nqhw19qb unique (email)
    2020-06-10 23:29:34 - 
    
        alter table owner 
           drop constraint if exists UK_hqy0j6l67wy4mivwqgafpjiub
    2020-06-10 23:29:34 - 
    
        alter table owner 
           add constraint UK_hqy0j6l67wy4mivwqgafpjiub unique (ssn)
    2020-06-10 23:29:34 - 
    
        alter table packaged_item 
           drop constraint if exists UKokybeh1jvrvvr8vv3xjqxeb9h
    2020-06-10 23:29:34 - 
    
        alter table packaged_item 
           add constraint UKokybeh1jvrvvr8vv3xjqxeb9h unique (itemid)
    2020-06-10 23:29:34 - 
    
        alter table packaged_item 
           drop constraint if exists UK_5y73ntbiqf6gbas6iu3lpxib1
    2020-06-10 23:29:34 - 
    
        alter table packaged_item 
           add constraint UK_5y73ntbiqf6gbas6iu3lpxib1 unique (item_name)
    2020-06-10 23:29:34 - 
    
        alter table person 
           drop constraint if exists UK6wjuvbalf4x2thqkfxejnlbvh
    2020-06-10 23:29:34 - 
    
        alter table person 
           add constraint UK6wjuvbalf4x2thqkfxejnlbvh unique (last_name, first_name)
    2020-06-10 23:29:34 - 
    
        alter table person 
           drop constraint if exists UK_fwmwi44u55bo4rvwsv0cln012
    2020-06-10 23:29:34 - 
    
        alter table person 
           add constraint UK_fwmwi44u55bo4rvwsv0cln012 unique (email)
    2020-06-10 23:29:34 - 
    
        alter table person 
           drop constraint if exists UK_6atyavdanbj9pwrbrod7irb2x
    2020-06-10 23:29:34 - 
    
        alter table person 
           add constraint UK_6atyavdanbj9pwrbrod7irb2x unique (last_name)
    2020-06-10 23:29:34 - 
    
        alter table raw_item 
           drop constraint if exists UKglpy5hi0nls6mhkcxpw6n8503
    2020-06-10 23:29:34 - 
    
        alter table raw_item 
           add constraint UKglpy5hi0nls6mhkcxpw6n8503 unique (itemid)
    2020-06-10 23:29:34 - 
    
        alter table raw_item 
           drop constraint if exists UK_sqhmohafu04jvwfkhkc2k84fr
    2020-06-10 23:29:34 - 
    
        alter table raw_item 
           add constraint UK_sqhmohafu04jvwfkhkc2k84fr unique (item_name)
    2020-06-10 23:29:34 - 
    
        alter table regulator 
           drop constraint if exists UKiim3poi4o2q61dw86ii1bg30w
    2020-06-10 23:29:34 - 
    
        alter table regulator 
           add constraint UKiim3poi4o2q61dw86ii1bg30w unique (last_name, first_name)
    2020-06-10 23:29:34 - 
    
        alter table regulator 
           drop constraint if exists UK_ggk93790o3f71axji1uef2bbl
    2020-06-10 23:29:34 - 
    
        alter table regulator 
           add constraint UK_ggk93790o3f71axji1uef2bbl unique (agency)
    2020-06-10 23:29:34 - 
    
        alter table regulator 
           drop constraint if exists UK_94s6c2q82qde1vvrxf10blwdp
    2020-06-10 23:29:34 - 
    
        alter table regulator 
           add constraint UK_94s6c2q82qde1vvrxf10blwdp unique (regulatorid)
    2020-06-10 23:29:34 - 
    
        alter table store 
           drop constraint if exists UKmwicjgpv36mj36ktnv70cihix
    2020-06-10 23:29:34 - 
    
        alter table store 
           add constraint UKmwicjgpv36mj36ktnv70cihix unique (storeid)
    2020-06-10 23:29:34 - 
    
        alter table store 
           drop constraint if exists UK_sgv7034urjkrsq9v914ruc70n
    2020-06-10 23:29:34 - 
    
        alter table store 
           add constraint UK_sgv7034urjkrsq9v914ruc70n unique (location)
    2020-06-10 23:29:34 - 
    
        alter table store 
           drop constraint if exists UK_t628hr0thqcknea2eb14y58jp
    2020-06-10 23:29:34 - 
    
        alter table store 
           add constraint UK_t628hr0thqcknea2eb14y58jp unique (phone)
    2020-06-10 23:29:34 - 
    
        alter table supplier 
           drop constraint if exists UKtlmhbkp5j7b6wcx66rdksgbbn
    2020-06-10 23:29:34 - 
    
        alter table supplier 
           add constraint UKtlmhbkp5j7b6wcx66rdksgbbn unique (supplierid)
    2020-06-10 23:29:34 - 
    
        alter table supplier 
           drop constraint if exists UK_g7qiwwu4vpciysmeeyme9gg1d
    2020-06-10 23:29:34 - 
    
        alter table supplier 
           add constraint UK_g7qiwwu4vpciysmeeyme9gg1d unique (email)
    2020-06-10 23:29:34 - 
    
        alter table supplier 
           drop constraint if exists UK_odw8hcb1lettg4mqax263yyb5
    2020-06-10 23:29:34 - 
    
        alter table supplier 
           add constraint UK_odw8hcb1lettg4mqax263yyb5 unique (phone)
    2020-06-10 23:29:34 - 
    
        alter table supply_contract 
           drop constraint if exists UK3vgl9l4d7ndv3i7njcyifhenn
    2020-06-10 23:29:34 - 
    
        alter table supply_contract 
           add constraint UK3vgl9l4d7ndv3i7njcyifhenn unique (contractid)
    2020-06-10 23:29:34 - 
    
        alter table supply_contract 
           drop constraint if exists UK_jastj09agjf6hy7sbpohv3n09
    2020-06-10 23:29:34 - 
    
        alter table supply_contract 
           add constraint UK_jastj09agjf6hy7sbpohv3n09 unique (packaged_itemid)
    2020-06-10 23:29:34 - 
    
        alter table address 
           add constraint FK81ihijcn1kdfwffke0c0sjqeb 
           foreign key (person_id) 
           references person
    2020-06-10 23:29:34 - 
    
        alter table audit 
           add constraint FKqqla6mr0dqkcrp95lpge233fa 
           foreign key (regulator_id) 
           references regulator
    2020-06-10 23:29:34 - 
    
        alter table audit 
           add constraint FKb1grfs42thryxjen70htyfc6q 
           foreign key (store_id) 
           references store
    2020-06-10 23:29:34 - 
    
        alter table store 
           add constraint FKrbk5w58pfolgn0gilf1dseh47 
           foreign key (owner) 
           references owner
    2020-06-10 23:29:34 - 
    
        alter table supply_contract 
           add constraint FKjsx88cjg04kfcha6twx6udox8 
           foreign key (raw_item) 
           references raw_item (itemid)
    2020-06-10 23:29:34 - 
    
        alter table supply_contract 
           add constraint FKecfwadtr8g2i6vw3rowm1s7hp 
           foreign key (supplier) 
           references supplier
    2020-06-10 23:29:35 - Started Demo2 in 0.998 seconds (JVM running for 7.429)

csc366.jpademo.Demo2 > testSaveRegulator() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - Regulator[test,test,test@,null,boss,audits=[]]

csc366.jpademo.Demo2 > testSaveRegulator() PASSED

csc366.jpademo.Demo2 > testGetRegulator() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo2 > testGetRegulator() PASSED

csc366.jpademo.Demo2 > testDeleteRegulator() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - 
        delete 
        from
            regulator 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo2 > testDeleteRegulator() PASSED

csc366.jpademo.Demo2 > testFindAllRegulator() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_

csc366.jpademo.Demo2 > testFindAllRegulator() PASSED

csc366.jpademo.Demo2 > testDeletByRegulatorId() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        delete 
        from
            regulator 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo2 > testDeletByRegulatorId() PASSED

csc366.jpademo.Demo2 > testJpqlFinder() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=? 
            or regulator0_.last_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo2 > testJpqlFinder() PASSED

csc366.jpademo.Demo2 > testSqlFinder() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - 
        select
            * 
        from
            Regulator as o 
        where
            o.first_name = ? 
            or o.last_name = ?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo2 > testSqlFinder() PASSED

csc366.jpademo.SupplyContractTests > testSaveSupplyContract() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_itemid, raw_item, start_date, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-10 23:29:35 - binding parameter [2] as [INTEGER] - [20]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-10 23:29:35 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-10 23:29:35 - binding parameter [8] as [BIGINT] - [null]
    2020-06-10 23:29:35 - 
        select
            supplycont0_.id as id1_9_,
            supplycont0_.contractid as contract2_9_,
            supplycont0_.delivery_amount as delivery3_9_,
            supplycont0_.delivery_frequency as delivery4_9_,
            supplycont0_.end_date as end_date5_9_,
            supplycont0_.packaged_itemid as packaged6_9_,
            supplycont0_.raw_item as raw_item8_9_,
            supplycont0_.start_date as start_da7_9_,
            supplycont0_.supplier as supplier9_9_ 
        from
            supply_contract supplycont0_ 
        where
            supplycont0_.contractid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-10 23:29:35 - SupplyContract[contract0,weekly,20,2019-04-13,2020-04-14,Milk,null]

csc366.jpademo.SupplyContractTests > testSaveSupplyContract() PASSED

csc366.jpademo.SupplyContractTests > testGetSupplyContract() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_itemid, raw_item, start_date, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-10 23:29:35 - binding parameter [2] as [INTEGER] - [20]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-10 23:29:35 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-10 23:29:35 - binding parameter [8] as [BIGINT] - [null]
    2020-06-10 23:29:35 - 
        select
            supplycont0_.id as id1_9_,
            supplycont0_.contractid as contract2_9_,
            supplycont0_.delivery_amount as delivery3_9_,
            supplycont0_.delivery_frequency as delivery4_9_,
            supplycont0_.end_date as end_date5_9_,
            supplycont0_.packaged_itemid as packaged6_9_,
            supplycont0_.raw_item as raw_item8_9_,
            supplycont0_.start_date as start_da7_9_,
            supplycont0_.supplier as supplier9_9_ 
        from
            supply_contract supplycont0_ 
        where
            supplycont0_.contractid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [contract0]

csc366.jpademo.SupplyContractTests > testGetSupplyContract() PASSED

csc366.jpademo.SupplyContractTests > testDeleteSupplyContract() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_itemid, raw_item, start_date, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-10 23:29:35 - binding parameter [2] as [INTEGER] - [20]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-10 23:29:35 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-10 23:29:35 - binding parameter [8] as [BIGINT] - [null]
    2020-06-10 23:29:35 - 
        delete 
        from
            supply_contract 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [3]
    2020-06-10 23:29:35 - 
        delete 
        from
            raw_item 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.SupplyContractTests > testDeleteSupplyContract() PASSED

csc366.jpademo.SupplyContractTests > testFindAllSupplyContracts() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_itemid, raw_item, start_date, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-10 23:29:35 - binding parameter [2] as [INTEGER] - [20]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-10 23:29:35 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-10 23:29:35 - binding parameter [8] as [BIGINT] - [null]
    2020-06-10 23:29:35 - 
        select
            supplycont0_.id as id1_9_,
            supplycont0_.contractid as contract2_9_,
            supplycont0_.delivery_amount as delivery3_9_,
            supplycont0_.delivery_frequency as delivery4_9_,
            supplycont0_.end_date as end_date5_9_,
            supplycont0_.packaged_itemid as packaged6_9_,
            supplycont0_.raw_item as raw_item8_9_,
            supplycont0_.start_date as start_da7_9_,
            supplycont0_.supplier as supplier9_9_ 
        from
            supply_contract supplycont0_

csc366.jpademo.SupplyContractTests > testFindAllSupplyContracts() PASSED

csc366.jpademo.RawItemTests > testSaveRawItem() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        select
            rawitem0_.id as id1_5_,
            rawitem0_.item_cost as item_cos2_5_,
            rawitem0_.item_description as item_des3_5_,
            rawitem0_.itemid as itemid4_5_,
            rawitem0_.item_name as item_nam5_5_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.item_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - Supplier[rawitem0,Milk,8.5,One gallon of whole milk]

csc366.jpademo.RawItemTests > testSaveRawItem() PASSED

csc366.jpademo.RawItemTests > testGetFromItemID() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        select
            rawitem0_.id as id1_5_,
            rawitem0_.item_cost as item_cos2_5_,
            rawitem0_.item_description as item_des3_5_,
            rawitem0_.itemid as itemid4_5_,
            rawitem0_.item_name as item_nam5_5_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.itemid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [rawitem0]

csc366.jpademo.RawItemTests > testGetFromItemID() PASSED

csc366.jpademo.RawItemTests > testDeleteRawItem() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        delete 
        from
            raw_item 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [7]

csc366.jpademo.RawItemTests > testDeleteRawItem() PASSED

csc366.jpademo.RawItemTests > testFindAllRawItems() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-10 23:29:35 - 
        select
            rawitem0_.id as id1_5_,
            rawitem0_.item_cost as item_cos2_5_,
            rawitem0_.item_description as item_des3_5_,
            rawitem0_.itemid as itemid4_5_,
            rawitem0_.item_name as item_nam5_5_ 
        from
            raw_item rawitem0_

csc366.jpademo.RawItemTests > testFindAllRawItems() PASSED

csc366.jpademo.Demo4 > testSaveOwner() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:35 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - Owner[test,test,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[]]

csc366.jpademo.Demo4 > testSaveOwner() PASSED

csc366.jpademo.Demo4 > testGetOwner() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:35 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo4 > testGetOwner() PASSED

csc366.jpademo.Demo4 > testDeleteOwner() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:35 - 
        delete 
        from
            owner 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo4 > testDeleteOwner() PASSED

csc366.jpademo.Demo4 > testFindAllOwners() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:35 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_

csc366.jpademo.Demo4 > testFindAllOwners() PASSED

csc366.jpademo.Demo4 > testDeletByOwnerId() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:35 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        delete 
        from
            owner 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo4 > testDeletByOwnerId() PASSED

csc366.jpademo.Demo4 > testJpqlFinder() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:35 - 
        select
            owner0_.id as id1_2_,
            owner0_.dob as dob2_2_,
            owner0_.email as email3_2_,
            owner0_.first_name as first_na4_2_,
            owner0_.last_name as last_nam5_2_,
            owner0_.phone as phone6_2_,
            owner0_.ssn as ssn7_2_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=? 
            or owner0_.last_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo4 > testJpqlFinder() PASSED

csc366.jpademo.Demo4 > testSqlFinder() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [123-456-7890]
    2020-06-10 23:29:35 - binding parameter [6] as [VARCHAR] - [123-45-6789]
    2020-06-10 23:29:35 - 
        select
            * 
        from
            Owner as o 
        where
            o.first_name = ? 
            or o.last_name = ?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo4 > testSqlFinder() PASSED

csc366.jpademo.Demo9 > testStoreAndAudit() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:35 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:35 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:35 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [5] as [BIGINT] - [7]
    2020-06-10 23:29:35 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[1,audit1,123,safety]]]

csc366.jpademo.Demo9 > testStoreAndAudit() PASSED

csc366.jpademo.Demo9 > testStoreAuditQuery() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:35 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:35 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:35 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [5] as [BIGINT] - [8]
    2020-06-10 23:29:35 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [Store1]

csc366.jpademo.Demo9 > testStoreAuditQuery() PASSED

csc366.jpademo.Demo9 > testStoreAudit() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:35 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:35 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:35 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [5] as [BIGINT] - [9]
    2020-06-10 23:29:35 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]

csc366.jpademo.Demo9 > testStoreAudit() PASSED

csc366.jpademo.Demo9 > testRemoveAuditAndFlush() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:35 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:35 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:35 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [5] as [BIGINT] - [10]
    2020-06-10 23:29:35 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [4]
    2020-06-10 23:29:35 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]

csc366.jpademo.Demo9 > testRemoveAuditAndFlush() PASSED

csc366.jpademo.Demo9 > testJpqlJoin() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:35 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:35 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:35 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:35 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [5] as [BIGINT] - [11]
    2020-06-10 23:29:35 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        inner join
            audit audits1_ 
                on store0_.id=audits1_.store_id 
        where
            store0_.storeid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[5,audit1,123,safety]]]
    2020-06-10 23:29:35 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [audit2]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [Quality]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [321]
    2020-06-10 23:29:35 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:35 - binding parameter [5] as [BIGINT] - [11]
    2020-06-10 23:29:35 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        inner join
            audit audits1_ 
                on store0_.id=audits1_.store_id 
        where
            store0_.storeid=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-10 23:29:35 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[5,audit1,123,safety], Audit[6,audit2,321,Quality]]]

csc366.jpademo.Demo9 > testJpqlJoin() PASSED

csc366.jpademo.Demo0 > testSavePerson() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - Person[1,test,test,addresses=[]]

csc366.jpademo.Demo0 > testSavePerson() PASSED

csc366.jpademo.Demo0 > testGetPerson() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo0 > testGetPerson() PASSED

csc366.jpademo.Demo0 > testDeletePerson() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        delete 
        from
            person 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo0 > testDeletePerson() PASSED

csc366.jpademo.Demo0 > testFindAllPersons() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_

csc366.jpademo.Demo0 > testFindAllPersons() PASSED

csc366.jpademo.Demo0 > testDeletByPersonId() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        delete 
        from
            person 
        where
            id=?
    2020-06-10 23:29:35 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo0 > testDeletByPersonId() PASSED

csc366.jpademo.Demo0 > testJpqlFinder() STANDARD_OUT
    2020-06-10 23:29:35 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=? 
            or person0_.last_name=?
    2020-06-10 23:29:35 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:35 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo0 > testJpqlFinder() PASSED

csc366.jpademo.Demo0 > testSqlFinder() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        select
            * 
        from
            person as p 
        where
            p.first_name = ? 
            or p.last_name = ?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo0 > testSqlFinder() PASSED

csc366.jpademo.Demo7 > testAuditRegulatorAndStore() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[7,audit1,123,safety]]]
    2020-06-10 23:29:36 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[7,audit1,123,safety]]]

csc366.jpademo.Demo7 > testAuditRegulatorAndStore() PASSED

csc366.jpademo.Demo7 > testAuditStoreQuery() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]

csc366.jpademo.Demo7 > testAuditStoreQuery() PASSED

csc366.jpademo.Demo7 > testJpqlJoin() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Store1]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 sqft]
    2020-06-10 23:29:36 - 
        update
            audit 
        set
            auditid=?,
            audit_type=?,
            date=?,
            regulator_id=?,
            store_id=? 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [12]
    2020-06-10 23:29:36 - binding parameter [6] as [BIGINT] - [9]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        inner join
            store store1_ 
                on audit0_.store_id=store1_.id 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - Audit[9,audit1,123,safety]

csc366.jpademo.Demo7 > testJpqlJoin() PASSED

csc366.jpademo.Demo7 > testJpqlJoin2() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:36 - 
        update
            audit 
        set
            auditid=?,
            audit_type=?,
            date=?,
            regulator_id=?,
            store_id=? 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [1]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [6] as [BIGINT] - [10]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        inner join
            regulator regulator1_ 
                on audit0_.regulator_id=regulator1_.id 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - Audit[10,audit1,123,safety]

csc366.jpademo.Demo7 > testJpqlJoin2() PASSED

csc366.jpademo.SupplierTests > testSaveSupplier() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-10 23:29:36 - 
        select
            supplier0_.id as id1_8_,
            supplier0_.email as email2_8_,
            supplier0_.phone as phone3_8_,
            supplier0_.supplierid as supplier4_8_,
            supplier0_.supplier_name as supplier5_8_,
            supplier0_.supplier_type as supplier6_8_ 
        from
            supplier supplier0_ 
        where
            supplier0_.supplier_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Joshua Farms]
    2020-06-10 23:29:36 - Supplier[supplier0,Joshua Farms,dairy,203-897-1033,jfarms991@gmail.com]

csc366.jpademo.SupplierTests > testSaveSupplier() PASSED

csc366.jpademo.Demo1 > testPersonAndAddress() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [1]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-10 23:29:36 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - Person[1,test,test,addresses=[Address[1,1 Grand Ave,SLO,CA,93407]]]

csc366.jpademo.Demo1 > testPersonAndAddress() PASSED

csc366.jpademo.Demo1 > testPersonAddressQuery() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [2]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-10 23:29:36 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo1 > testPersonAddressQuery() PASSED

csc366.jpademo.Demo1 > testRemoveAddress() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [3]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-10 23:29:36 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - Person[3,test,test,addresses=[]]

csc366.jpademo.Demo1 > testRemoveAddress() PASSED

csc366.jpademo.Demo1 > testRemoveAddressAndFlush() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [4]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-10 23:29:36 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        delete 
        from
            address 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [BIGINT] - [4]
    2020-06-10 23:29:36 - Person[4,test,test,addresses=[]]

csc366.jpademo.Demo1 > testRemoveAddressAndFlush() PASSED

csc366.jpademo.Demo1 > testJpqlJoin() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [5]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-10 23:29:36 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        inner join
            address addresses1_ 
                on person0_.id=addresses1_.person_id 
        where
            person0_.first_name=? 
            or person0_.last_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - Person[5,test,test,addresses=[Address[5,1 Grand Ave,SLO,CA,93407]]]
    2020-06-10 23:29:36 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [5]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [2 Grand Ave]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [93407-0002]
    2020-06-10 23:29:36 - 
        select
            person0_.id as id1_4_,
            person0_.email as email2_4_,
            person0_.first_name as first_na3_4_,
            person0_.last_name as last_nam4_4_ 
        from
            person person0_ 
        inner join
            address addresses1_ 
                on person0_.id=addresses1_.person_id 
        where
            person0_.first_name=? 
            or person0_.last_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - Person[5,test,test,addresses=[Address[5,1 Grand Ave,SLO,CA,93407], Address[6,2 Grand Ave,SLO,CA,93407-0002]]]

csc366.jpademo.Demo1 > testJpqlJoin() PASSED

csc366.jpademo.Demo3 > testRegulatorAndAudit() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [2]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[11,audit1,123,safety]]]

csc366.jpademo.Demo3 > testRegulatorAndAudit() PASSED

csc366.jpademo.Demo3 > testRegulatorAuditQuery() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [3]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Jane]

csc366.jpademo.Demo3 > testRegulatorAuditQuery() PASSED

csc366.jpademo.Demo3 > testRemoveAudit() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [4]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[]]

csc366.jpademo.Demo3 > testRemoveAudit() PASSED

csc366.jpademo.Demo3 > testRemoveAuditAndFlush() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [5]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [BIGINT] - [14]
    2020-06-10 23:29:36 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[]]

csc366.jpademo.Demo3 > testRemoveAuditAndFlush() PASSED

csc366.jpademo.Demo3 > testJpqlJoin() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [6]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        inner join
            audit audits1_ 
                on regulator0_.id=audits1_.regulator_id 
        where
            regulator0_.first_name=? 
            or regulator0_.last_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[15,audit1,123,safety]]]
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [audit2]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Quality]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [321]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [6]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            regulator0_.id as id1_6_,
            regulator0_.agency as agency2_6_,
            regulator0_.first_name as first_na3_6_,
            regulator0_.last_name as last_nam4_6_,
            regulator0_.position as position5_6_,
            regulator0_.regulatorid as regulato6_6_ 
        from
            regulator regulator0_ 
        inner join
            audit audits1_ 
                on regulator0_.id=audits1_.regulator_id 
        where
            regulator0_.first_name=? 
            or regulator0_.last_name=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-10 23:29:36 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[15,audit1,123,safety], Audit[16,audit2,321,Quality]]]

csc366.jpademo.Demo3 > testJpqlJoin() PASSED

csc366.jpademo.Demo6 > testSaveAudit() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - Audit[1,test,123,safety]

csc366.jpademo.Demo6 > testSaveAudit() PASSED

csc366.jpademo.Demo6 > testGetAudit() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo6 > testGetAudit() PASSED

csc366.jpademo.Demo6 > testDeleteAudit() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo6 > testDeleteAudit() PASSED

csc366.jpademo.Demo6 > testFindAllAudit() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_

csc366.jpademo.Demo6 > testFindAllAudit() PASSED

csc366.jpademo.Demo6 > testDeletByAuditId() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo6 > testDeletByAuditId() PASSED

csc366.jpademo.Demo6 > testJpqlFinder() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo6 > testJpqlFinder() PASSED

csc366.jpademo.Demo6 > testSqlFinder() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-10 23:29:36 - binding parameter [4] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [5] as [BIGINT] - [null]
    2020-06-10 23:29:36 - 
        select
            * 
        from
            Audit as o 
        where
            o.auditID = ?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo6 > testSqlFinder() PASSED

csc366.jpademo.Demo8 > testSaveStore() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 ft]
    2020-06-10 23:29:36 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - Store[test,1234567890,Center,200 ft,audits=[]]

csc366.jpademo.Demo8 > testSaveStore() PASSED

csc366.jpademo.Demo8 > testGetStore() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 ft]
    2020-06-10 23:29:36 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo8 > testGetStore() PASSED

csc366.jpademo.Demo8 > testDeleteStore() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 ft]
    2020-06-10 23:29:36 - 
        delete 
        from
            store 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo8 > testDeleteStore() PASSED

csc366.jpademo.Demo8 > testFindAllStore() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 ft]
    2020-06-10 23:29:36 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_

csc366.jpademo.Demo8 > testFindAllStore() PASSED

csc366.jpademo.Demo8 > testDeletByStoreId() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 ft]
    2020-06-10 23:29:36 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - 
        delete 
        from
            store 
        where
            id=?
    2020-06-10 23:29:36 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo8 > testDeletByStoreId() PASSED

csc366.jpademo.Demo8 > testJpqlFinder() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 ft]
    2020-06-10 23:29:36 - 
        select
            store0_.id as id1_7_,
            store0_.location as location2_7_,
            store0_.owner as owner6_7_,
            store0_.phone as phone3_7_,
            store0_.storeid as storeid4_7_,
            store0_.store_size as store_si5_7_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo8 > testJpqlFinder() PASSED

csc366.jpademo.Demo8 > testSqlFinder() STANDARD_OUT
    2020-06-10 23:29:36 - 
        insert 
        into
            store
            (id, location, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-10 23:29:36 - binding parameter [2] as [BIGINT] - [null]
    2020-06-10 23:29:36 - binding parameter [3] as [VARCHAR] - [1234567890]
    2020-06-10 23:29:36 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-10 23:29:36 - binding parameter [5] as [VARCHAR] - [200 ft]
    2020-06-10 23:29:36 - 
        select
            * 
        from
            Store as o 
        where
            o.storeID = ?
    2020-06-10 23:29:36 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo8 > testSqlFinder() PASSED

BUILD SUCCESSFUL in 10s
4 actionable tasks: 2 executed, 2 up-to-date
