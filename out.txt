> Task :compileJava
> Task :processResources UP-TO-DATE
> Task :classes
> Task :compileTestJava
> Task :processTestResources NO-SOURCE
> Task :testClasses

> Task :test

csc366.jpademo.Demo5 STANDARD_OUT
    19:05:19.598 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
    19:05:19.623 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
    19:05:19.695 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [csc366.jpademo.Demo5] from class [org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper]
    19:05:19.715 [Test worker] INFO org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [csc366.jpademo.Demo5], using SpringBootContextLoader
    19:05:19.721 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [csc366.jpademo.Demo5]: class path resource [csc366/jpademo/Demo5-context.xml] does not exist
    19:05:19.722 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [csc366.jpademo.Demo5]: class path resource [csc366/jpademo/Demo5Context.groovy] does not exist
    19:05:19.722 [Test worker] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [csc366.jpademo.Demo5]: no resource found for suffixes {-context.xml, Context.groovy}.
    19:05:19.723 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [csc366.jpademo.Demo5]: Demo5 does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
    19:05:19.794 [Test worker] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [csc366.jpademo.Demo5]
    19:05:19.884 [Test worker] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/home/ncpalmie/School/Migler366/final_proj/366-Database-Project/build/classes/java/main/csc366/jpademo/JpaDemoApplication.class]
    19:05:19.891 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration csc366.jpademo.JpaDemoApplication for test class csc366.jpademo.Demo5
    19:05:19.893 [Test worker] DEBUG org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - @TestExecutionListeners is not present for class [csc366.jpademo.Demo5]: using defaults.
    19:05:19.894 [Test worker] INFO org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
    19:05:19.914 [Test worker] INFO org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@2c15c130, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@a03a175, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@b486f57, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@52235617, org.springframework.test.context.support.DirtiesContextTestExecutionListener@50bd1122, org.springframework.test.context.transaction.TransactionalTestExecutionListener@47a21a49, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@f58f73d, org.springframework.test.context.event.EventPublishingTestExecutionListener@47039b2f, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@7f8fa6ec, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@28a89b06, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@60017031, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@3b8055fd, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@39ba3ca7]
    19:05:19.918 [Test worker] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@75cc1126 testClass = Demo5, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@3956e1c6 testClass = Demo5, locations = '{}', classes = '{class csc366.jpademo.JpaDemoApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{spring.main.banner-mode=off, logging.level.root=ERROR, logging.level.csc366=DEBUG, spring.jpa.hibernate.ddl-auto=update, spring.datasource.url=jdbc:mysql://mysql.labthreesixsix.com/csc366, spring.datasource.username=jpa, spring.datasource.password=demo, logging.level.org.hibernate.SQL=DEBUG, logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE, spring.jpa.properties.hibernate.format_sql=true, spring.jpa.show-sql=false, spring.jpa.properties.hibernate.show_sql=false, logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n, org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@61a01ca7, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@ba0b8bb4, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@531d39ee, [ImportsContextCustomizer@30ef8da8 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@439e033f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@7d29efa6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
    19:05:19.935 [Test worker] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@75cc1126 testClass = Demo5, testInstance = csc366.jpademo.Demo5@7628dd0d, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@3956e1c6 testClass = Demo5, locations = '{}', classes = '{class csc366.jpademo.JpaDemoApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{spring.main.banner-mode=off, logging.level.root=ERROR, logging.level.csc366=DEBUG, spring.jpa.hibernate.ddl-auto=update, spring.datasource.url=jdbc:mysql://mysql.labthreesixsix.com/csc366, spring.datasource.username=jpa, spring.datasource.password=demo, logging.level.org.hibernate.SQL=DEBUG, logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE, spring.jpa.properties.hibernate.format_sql=true, spring.jpa.show-sql=false, spring.jpa.properties.hibernate.show_sql=false, logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n, org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@61a01ca7, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@ba0b8bb4, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@531d39ee, [ImportsContextCustomizer@30ef8da8 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@439e033f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@7d29efa6, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]]].
    19:05:20.056 [Test worker] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, spring.main.banner-mode=off, logging.level.root=ERROR, logging.level.csc366=DEBUG, spring.jpa.hibernate.ddl-auto=update, spring.datasource.url=jdbc:mysql://mysql.labthreesixsix.com/csc366, spring.datasource.username=jpa, spring.datasource.password=demo, logging.level.org.hibernate.SQL=DEBUG, logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE, spring.jpa.properties.hibernate.format_sql=true, spring.jpa.show-sql=false, spring.jpa.properties.hibernate.show_sql=false, logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n, org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true, server.port=-1}
    2020-06-11 19:05:20 - Starting Demo5 on Devon with PID 30420 (started by ncpalmie in /home/ncpalmie/School/Migler366/final_proj/366-Database-Project)
    2020-06-11 19:05:20 - Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
    2020-06-11 19:05:20 - No active profile set, falling back to default profiles: default
    2020-06-11 19:05:23 - 
    
        create table address (
           id bigint generated by default as identity,
            city varchar(255),
            state varchar(255),
            street varchar(255),
            zip_code varchar(255),
            person_id bigint,
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table audit (
           id bigint generated by default as identity,
            auditid varchar(255) not null,
            audit_type varchar(255),
            date varchar(255),
            regulator_id bigint,
            store_id bigint,
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table employee (
           id bigint generated by default as identity,
            date_of_birth date,
            email varchar(255) not null,
            end_date date,
            first_name varchar(255),
            last_name varchar(255),
            phone varchar(255),
            ssn varchar(255),
            start_date date,
            storeid bigint,
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table inventory (
           inventoryid integer generated by default as identity,
            store varchar(255),
            primary key (inventoryid)
        )
    2020-06-11 19:05:23 - 
    
        create table inventory_entry (
           id bigint generated by default as identity,
            inventory_entryid varchar(255) not null,
            item_quantity integer,
            inventory integer,
            packaged_item varchar(255),
            raw_item varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table loc_mgr (
           email varchar(255) not null,
            dob varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            phone varchar(255),
            ssn varchar(255),
            primary key (email)
        )
    2020-06-11 19:05:23 - 
    
        create table owner (
           id bigint generated by default as identity,
            dob varchar(255),
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            phone varchar(255),
            ssn varchar(255),
            manager varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table packaged_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table person (
           id bigint generated by default as identity,
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table prepared_item (
           itemid integer generated by default as identity,
            item_cost double not null,
            item_description varchar(255) not null,
            item_name varchar(255) not null,
            prep_time_min integer not null,
            primary key (itemid)
        )
    2020-06-11 19:05:23 - 
    
        create table raw_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table recipes (
           prepareditem_id integer not null,
            rawitem_id bigint not null
        )
    2020-06-11 19:05:23 - 
    
        create table regulator (
           id bigint generated by default as identity,
            agency varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            position varchar(255),
            regulatorid varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table store (
           id bigint generated by default as identity,
            location varchar(255),
            phone varchar(255),
            storeid varchar(255) not null,
            store_size varchar(255),
            manager varchar(255),
            owner bigint,
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table supplier (
           id bigint generated by default as identity,
            email varchar(255),
            phone varchar(255),
            supplierid varchar(255) not null,
            supplier_name varchar(255),
            supplier_type varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        create table supply_contract (
           id bigint generated by default as identity,
            contractid varchar(255) not null,
            delivery_amount integer,
            delivery_frequency varchar(255),
            end_date timestamp,
            start_date timestamp,
            packaged_item varchar(255),
            raw_item varchar(255),
            store_supplied varchar(255),
            supplier bigint,
            primary key (id)
        )
    2020-06-11 19:05:23 - 
    
        alter table audit 
           drop constraint if exists UK_ep28asefanvvvmhh8k2jqqejb
    2020-06-11 19:05:23 - 
    
        alter table audit 
           add constraint UK_ep28asefanvvvmhh8k2jqqejb unique (auditid)
    2020-06-11 19:05:23 - 
    
        alter table employee 
           drop constraint if exists UK_fopic1oh5oln2khj8eat6ino0
    2020-06-11 19:05:23 - 
    
        alter table employee 
           add constraint UK_fopic1oh5oln2khj8eat6ino0 unique (email)
    2020-06-11 19:05:23 - 
    
        alter table inventory_entry 
           drop constraint if exists UKqpg00yw8okf0r77tbe5t3us6d
    2020-06-11 19:05:23 - 
    
        alter table inventory_entry 
           add constraint UKqpg00yw8okf0r77tbe5t3us6d unique (inventory_entryid)
    2020-06-11 19:05:23 - 
    
        alter table loc_mgr 
           drop constraint if exists UK8l1wwa39n3a0gxs9faw1u0tmv
    2020-06-11 19:05:23 - 
    
        alter table loc_mgr 
           add constraint UK8l1wwa39n3a0gxs9faw1u0tmv unique (last_name, first_name)
    2020-06-11 19:05:23 - 
    
        alter table loc_mgr 
           drop constraint if exists UK_bpro2lwu2in3bw4vc3xlt3y3v
    2020-06-11 19:05:23 - 
    
        alter table loc_mgr 
           add constraint UK_bpro2lwu2in3bw4vc3xlt3y3v unique (ssn)
    2020-06-11 19:05:23 - 
    
        alter table owner 
           drop constraint if exists UKtip4jka4tc5h0f77saa1vf1v8
    2020-06-11 19:05:23 - 
    
        alter table owner 
           add constraint UKtip4jka4tc5h0f77saa1vf1v8 unique (last_name, first_name)
    2020-06-11 19:05:23 - 
    
        alter table owner 
           drop constraint if exists UK_kcaoebbgb82ro5cw9nqhw19qb
    2020-06-11 19:05:23 - 
    
        alter table owner 
           add constraint UK_kcaoebbgb82ro5cw9nqhw19qb unique (email)
    2020-06-11 19:05:23 - 
    
        alter table owner 
           drop constraint if exists UK_hqy0j6l67wy4mivwqgafpjiub
    2020-06-11 19:05:23 - 
    
        alter table owner 
           add constraint UK_hqy0j6l67wy4mivwqgafpjiub unique (ssn)
    2020-06-11 19:05:23 - 
    
        alter table packaged_item 
           drop constraint if exists UKokybeh1jvrvvr8vv3xjqxeb9h
    2020-06-11 19:05:23 - 
    
        alter table packaged_item 
           add constraint UKokybeh1jvrvvr8vv3xjqxeb9h unique (itemid)
    2020-06-11 19:05:23 - 
    
        alter table packaged_item 
           drop constraint if exists UK_5y73ntbiqf6gbas6iu3lpxib1
    2020-06-11 19:05:23 - 
    
        alter table packaged_item 
           add constraint UK_5y73ntbiqf6gbas6iu3lpxib1 unique (item_name)
    2020-06-11 19:05:23 - 
    
        alter table person 
           drop constraint if exists UK6wjuvbalf4x2thqkfxejnlbvh
    2020-06-11 19:05:23 - 
    
        alter table person 
           add constraint UK6wjuvbalf4x2thqkfxejnlbvh unique (last_name, first_name)
    2020-06-11 19:05:23 - 
    
        alter table person 
           drop constraint if exists UK_fwmwi44u55bo4rvwsv0cln012
    2020-06-11 19:05:23 - 
    
        alter table person 
           add constraint UK_fwmwi44u55bo4rvwsv0cln012 unique (email)
    2020-06-11 19:05:23 - 
    
        alter table person 
           drop constraint if exists UK_6atyavdanbj9pwrbrod7irb2x
    2020-06-11 19:05:23 - 
    
        alter table person 
           add constraint UK_6atyavdanbj9pwrbrod7irb2x unique (last_name)
    2020-06-11 19:05:23 - 
    
        alter table raw_item 
           drop constraint if exists UKglpy5hi0nls6mhkcxpw6n8503
    2020-06-11 19:05:23 - 
    
        alter table raw_item 
           add constraint UKglpy5hi0nls6mhkcxpw6n8503 unique (itemid)
    2020-06-11 19:05:23 - 
    
        alter table raw_item 
           drop constraint if exists UK_sqhmohafu04jvwfkhkc2k84fr
    2020-06-11 19:05:23 - 
    
        alter table raw_item 
           add constraint UK_sqhmohafu04jvwfkhkc2k84fr unique (item_name)
    2020-06-11 19:05:23 - 
    
        alter table regulator 
           drop constraint if exists UKiim3poi4o2q61dw86ii1bg30w
    2020-06-11 19:05:23 - 
    
        alter table regulator 
           add constraint UKiim3poi4o2q61dw86ii1bg30w unique (last_name, first_name)
    2020-06-11 19:05:23 - 
    
        alter table regulator 
           drop constraint if exists UK_ggk93790o3f71axji1uef2bbl
    2020-06-11 19:05:23 - 
    
        alter table regulator 
           add constraint UK_ggk93790o3f71axji1uef2bbl unique (agency)
    2020-06-11 19:05:23 - 
    
        alter table regulator 
           drop constraint if exists UK_94s6c2q82qde1vvrxf10blwdp
    2020-06-11 19:05:23 - 
    
        alter table regulator 
           add constraint UK_94s6c2q82qde1vvrxf10blwdp unique (regulatorid)
    2020-06-11 19:05:23 - 
    
        alter table store 
           drop constraint if exists UKmwicjgpv36mj36ktnv70cihix
    2020-06-11 19:05:23 - 
    
        alter table store 
           add constraint UKmwicjgpv36mj36ktnv70cihix unique (storeid)
    2020-06-11 19:05:23 - 
    
        alter table store 
           drop constraint if exists UK_sgv7034urjkrsq9v914ruc70n
    2020-06-11 19:05:23 - 
    
        alter table store 
           add constraint UK_sgv7034urjkrsq9v914ruc70n unique (location)
    2020-06-11 19:05:23 - 
    
        alter table store 
           drop constraint if exists UK_t628hr0thqcknea2eb14y58jp
    2020-06-11 19:05:23 - 
    
        alter table store 
           add constraint UK_t628hr0thqcknea2eb14y58jp unique (phone)
    2020-06-11 19:05:23 - 
    
        alter table supplier 
           drop constraint if exists UKtlmhbkp5j7b6wcx66rdksgbbn
    2020-06-11 19:05:23 - 
    
        alter table supplier 
           add constraint UKtlmhbkp5j7b6wcx66rdksgbbn unique (supplierid)
    2020-06-11 19:05:23 - 
    
        alter table supplier 
           drop constraint if exists UK_g7qiwwu4vpciysmeeyme9gg1d
    2020-06-11 19:05:23 - 
    
        alter table supplier 
           add constraint UK_g7qiwwu4vpciysmeeyme9gg1d unique (email)
    2020-06-11 19:05:23 - 
    
        alter table supplier 
           drop constraint if exists UK_odw8hcb1lettg4mqax263yyb5
    2020-06-11 19:05:23 - 
    
        alter table supplier 
           add constraint UK_odw8hcb1lettg4mqax263yyb5 unique (phone)
    2020-06-11 19:05:23 - 
    
        alter table supply_contract 
           drop constraint if exists UK3vgl9l4d7ndv3i7njcyifhenn
    2020-06-11 19:05:23 - 
    
        alter table supply_contract 
           add constraint UK3vgl9l4d7ndv3i7njcyifhenn unique (contractid)
    2020-06-11 19:05:23 - 
    
        alter table address 
           add constraint FK81ihijcn1kdfwffke0c0sjqeb 
           foreign key (person_id) 
           references person
    2020-06-11 19:05:23 - 
    
        alter table audit 
           add constraint FKqqla6mr0dqkcrp95lpge233fa 
           foreign key (regulator_id) 
           references regulator
    2020-06-11 19:05:23 - 
    
        alter table audit 
           add constraint FKb1grfs42thryxjen70htyfc6q 
           foreign key (store_id) 
           references store
    2020-06-11 19:05:23 - 
    
        alter table employee 
           add constraint FKtgbqs6uc58uf9ybapljkdw3ft 
           foreign key (storeid) 
           references store
    2020-06-11 19:05:23 - 
    
        alter table inventory 
           add constraint FKjel0fduy1umknciew4cvyml2c 
           foreign key (store) 
           references store (storeid)
    2020-06-11 19:05:23 - 
    
        alter table inventory_entry 
           add constraint FKra804e6gbcbgvsb1mlw741nns 
           foreign key (inventory) 
           references inventory
    2020-06-11 19:05:23 - 
    
        alter table inventory_entry 
           add constraint FKq1uhgsykuf78djaunk4mo5bvk 
           foreign key (packaged_item) 
           references packaged_item (itemid)
    2020-06-11 19:05:23 - 
    
        alter table inventory_entry 
           add constraint FKgkw37qnmvfshplxk6q5hk8qui 
           foreign key (raw_item) 
           references raw_item (itemid)
    2020-06-11 19:05:23 - 
    
        alter table owner 
           add constraint FKnqcr3duilytx6a5x1g9a16fre 
           foreign key (manager) 
           references loc_mgr
    2020-06-11 19:05:23 - 
    
        alter table recipes 
           add constraint FKs5mm941dbt09p1hfodvkfw4hh 
           foreign key (rawitem_id) 
           references raw_item
    2020-06-11 19:05:23 - 
    
        alter table recipes 
           add constraint FKexf5sjgtygyhe0pxl8csjjhv7 
           foreign key (prepareditem_id) 
           references prepared_item
    2020-06-11 19:05:23 - 
    
        alter table store 
           add constraint FKkexn9ju7n6renxjhmd3lpm4rv 
           foreign key (manager) 
           references loc_mgr
    2020-06-11 19:05:23 - 
    
        alter table store 
           add constraint FKrbk5w58pfolgn0gilf1dseh47 
           foreign key (owner) 
           references owner
    2020-06-11 19:05:23 - 
    
        alter table supply_contract 
           add constraint FK1wni75n290ja07cxs1jg3byde 
           foreign key (packaged_item) 
           references packaged_item (itemid)
    2020-06-11 19:05:23 - 
    
        alter table supply_contract 
           add constraint FKjsx88cjg04kfcha6twx6udox8 
           foreign key (raw_item) 
           references raw_item (itemid)
    2020-06-11 19:05:23 - 
    
        alter table supply_contract 
           add constraint FKpqjt3ib5ml4fi38xvb1u98yni 
           foreign key (store_supplied) 
           references store (storeid)
    2020-06-11 19:05:23 - 
    
        alter table supply_contract 
           add constraint FKecfwadtr8g2i6vw3rowm1s7hp 
           foreign key (supplier) 
           references supplier
    2020-06-11 19:05:24 - Started Demo5 in 4.823 seconds (JVM running for 6.412)

csc366.jpademo.Demo5 > testOwnerAndStore() STANDARD_OUT
    2020-06-11 19:05:25 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:25 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:25 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:25 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [3] as [BIGINT] - [1]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:25 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]]]

csc366.jpademo.Demo5 > testOwnerAndStore() PASSED

csc366.jpademo.Demo5 > testOwnerAndStoreQuery() STANDARD_OUT
    2020-06-11 19:05:25 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:25 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:25 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:25 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [3] as [BIGINT] - [2]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:25 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [Jane]

csc366.jpademo.Demo5 > testOwnerAndStoreQuery() PASSED

csc366.jpademo.Demo5 > testRemoveStore() STANDARD_OUT
    2020-06-11 19:05:25 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:25 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:25 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:25 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [3] as [BIGINT] - [3]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:25 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[]]

csc366.jpademo.Demo5 > testRemoveStore() PASSED

csc366.jpademo.Demo5 > testRemoveStoreAndFlush() STANDARD_OUT
    2020-06-11 19:05:25 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:25 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:25 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:25 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [3] as [BIGINT] - [4]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:25 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - 
        delete 
        from
            store 
        where
            id=?
    2020-06-11 19:05:25 - binding parameter [1] as [BIGINT] - [4]
    2020-06-11 19:05:25 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[]]

csc366.jpademo.Demo5 > testRemoveStoreAndFlush() PASSED

csc366.jpademo.Demo5 > testJpqlJoin() STANDARD_OUT
    2020-06-11 19:05:25 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:25 - binding parameter [3] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [Doe]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:25 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:25 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [3] as [BIGINT] - [5]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:25 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        inner join
            store stores1_ 
                on owner0_.id=stores1_.owner 
        where
            owner0_.first_name=? 
            or owner0_.last_name=?
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]]]
    2020-06-11 19:05:25 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [123 Outer Dr]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:25 - binding parameter [3] as [BIGINT] - [5]
    2020-06-11 19:05:25 - binding parameter [4] as [VARCHAR] - [0987654321]
    2020-06-11 19:05:25 - binding parameter [5] as [VARCHAR] - [Store2]
    2020-06-11 19:05:25 - binding parameter [6] as [VARCHAR] - [100 sqft]
    2020-06-11 19:05:25 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        inner join
            store stores1_ 
                on owner0_.id=stores1_.owner 
        where
            owner0_.first_name=? 
            or owner0_.last_name=?
    2020-06-11 19:05:25 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:25 - Owner[Jane,Doe,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]], Store[Store2,0987654321,123 Outer Dr,100 sqft,audits=[]]]]

csc366.jpademo.Demo5 > testJpqlJoin() PASSED

csc366.jpademo.Demo2 STANDARD_OUT
    2020-06-11 19:05:25 - Starting Demo2 on Devon with PID 30420 (started by ncpalmie in /home/ncpalmie/School/Migler366/final_proj/366-Database-Project)
    2020-06-11 19:05:25 - Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
    2020-06-11 19:05:25 - No active profile set, falling back to default profiles: default
    2020-06-11 19:05:25 - 
    
        create table address (
           id bigint generated by default as identity,
            city varchar(255),
            state varchar(255),
            street varchar(255),
            zip_code varchar(255),
            person_id bigint,
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table audit (
           id bigint generated by default as identity,
            auditid varchar(255) not null,
            audit_type varchar(255),
            date varchar(255),
            regulator_id bigint,
            store_id bigint,
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table employee (
           id bigint generated by default as identity,
            date_of_birth date,
            email varchar(255) not null,
            end_date date,
            first_name varchar(255),
            last_name varchar(255),
            phone varchar(255),
            ssn varchar(255),
            start_date date,
            storeid bigint,
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table inventory (
           inventoryid integer generated by default as identity,
            store varchar(255),
            primary key (inventoryid)
        )
    2020-06-11 19:05:25 - 
    
        create table inventory_entry (
           id bigint generated by default as identity,
            inventory_entryid varchar(255) not null,
            item_quantity integer,
            inventory integer,
            packaged_item varchar(255),
            raw_item varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table loc_mgr (
           email varchar(255) not null,
            dob varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            phone varchar(255),
            ssn varchar(255),
            primary key (email)
        )
    2020-06-11 19:05:25 - 
    
        create table owner (
           id bigint generated by default as identity,
            dob varchar(255),
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            phone varchar(255),
            ssn varchar(255),
            manager varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table packaged_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table person (
           id bigint generated by default as identity,
            email varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table prepared_item (
           itemid integer generated by default as identity,
            item_cost double not null,
            item_description varchar(255) not null,
            item_name varchar(255) not null,
            prep_time_min integer not null,
            primary key (itemid)
        )
    2020-06-11 19:05:25 - 
    
        create table raw_item (
           id bigint generated by default as identity,
            item_cost double,
            item_description varchar(255),
            itemid varchar(255) not null,
            item_name varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table recipes (
           prepareditem_id integer not null,
            rawitem_id bigint not null
        )
    2020-06-11 19:05:25 - 
    
        create table regulator (
           id bigint generated by default as identity,
            agency varchar(255),
            first_name varchar(255),
            last_name varchar(255) not null,
            position varchar(255),
            regulatorid varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table store (
           id bigint generated by default as identity,
            location varchar(255),
            phone varchar(255),
            storeid varchar(255) not null,
            store_size varchar(255),
            manager varchar(255),
            owner bigint,
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table supplier (
           id bigint generated by default as identity,
            email varchar(255),
            phone varchar(255),
            supplierid varchar(255) not null,
            supplier_name varchar(255),
            supplier_type varchar(255),
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        create table supply_contract (
           id bigint generated by default as identity,
            contractid varchar(255) not null,
            delivery_amount integer,
            delivery_frequency varchar(255),
            end_date timestamp,
            start_date timestamp,
            packaged_item varchar(255),
            raw_item varchar(255),
            store_supplied varchar(255),
            supplier bigint,
            primary key (id)
        )
    2020-06-11 19:05:25 - 
    
        alter table audit 
           drop constraint if exists UK_ep28asefanvvvmhh8k2jqqejb
    2020-06-11 19:05:25 - 
    
        alter table audit 
           add constraint UK_ep28asefanvvvmhh8k2jqqejb unique (auditid)
    2020-06-11 19:05:25 - 
    
        alter table employee 
           drop constraint if exists UK_fopic1oh5oln2khj8eat6ino0
    2020-06-11 19:05:25 - 
    
        alter table employee 
           add constraint UK_fopic1oh5oln2khj8eat6ino0 unique (email)
    2020-06-11 19:05:25 - 
    
        alter table inventory_entry 
           drop constraint if exists UKqpg00yw8okf0r77tbe5t3us6d
    2020-06-11 19:05:25 - 
    
        alter table inventory_entry 
           add constraint UKqpg00yw8okf0r77tbe5t3us6d unique (inventory_entryid)
    2020-06-11 19:05:25 - 
    
        alter table loc_mgr 
           drop constraint if exists UK8l1wwa39n3a0gxs9faw1u0tmv
    2020-06-11 19:05:25 - 
    
        alter table loc_mgr 
           add constraint UK8l1wwa39n3a0gxs9faw1u0tmv unique (last_name, first_name)
    2020-06-11 19:05:25 - 
    
        alter table loc_mgr 
           drop constraint if exists UK_bpro2lwu2in3bw4vc3xlt3y3v
    2020-06-11 19:05:25 - 
    
        alter table loc_mgr 
           add constraint UK_bpro2lwu2in3bw4vc3xlt3y3v unique (ssn)
    2020-06-11 19:05:25 - 
    
        alter table owner 
           drop constraint if exists UKtip4jka4tc5h0f77saa1vf1v8
    2020-06-11 19:05:25 - 
    
        alter table owner 
           add constraint UKtip4jka4tc5h0f77saa1vf1v8 unique (last_name, first_name)
    2020-06-11 19:05:25 - 
    
        alter table owner 
           drop constraint if exists UK_kcaoebbgb82ro5cw9nqhw19qb
    2020-06-11 19:05:25 - 
    
        alter table owner 
           add constraint UK_kcaoebbgb82ro5cw9nqhw19qb unique (email)
    2020-06-11 19:05:25 - 
    
        alter table owner 
           drop constraint if exists UK_hqy0j6l67wy4mivwqgafpjiub
    2020-06-11 19:05:25 - 
    
        alter table owner 
           add constraint UK_hqy0j6l67wy4mivwqgafpjiub unique (ssn)
    2020-06-11 19:05:25 - 
    
        alter table packaged_item 
           drop constraint if exists UKokybeh1jvrvvr8vv3xjqxeb9h
    2020-06-11 19:05:25 - 
    
        alter table packaged_item 
           add constraint UKokybeh1jvrvvr8vv3xjqxeb9h unique (itemid)
    2020-06-11 19:05:25 - 
    
        alter table packaged_item 
           drop constraint if exists UK_5y73ntbiqf6gbas6iu3lpxib1
    2020-06-11 19:05:25 - 
    
        alter table packaged_item 
           add constraint UK_5y73ntbiqf6gbas6iu3lpxib1 unique (item_name)
    2020-06-11 19:05:25 - 
    
        alter table person 
           drop constraint if exists UK6wjuvbalf4x2thqkfxejnlbvh
    2020-06-11 19:05:25 - 
    
        alter table person 
           add constraint UK6wjuvbalf4x2thqkfxejnlbvh unique (last_name, first_name)
    2020-06-11 19:05:25 - 
    
        alter table person 
           drop constraint if exists UK_fwmwi44u55bo4rvwsv0cln012
    2020-06-11 19:05:25 - 
    
        alter table person 
           add constraint UK_fwmwi44u55bo4rvwsv0cln012 unique (email)
    2020-06-11 19:05:25 - 
    
        alter table person 
           drop constraint if exists UK_6atyavdanbj9pwrbrod7irb2x
    2020-06-11 19:05:25 - 
    
        alter table person 
           add constraint UK_6atyavdanbj9pwrbrod7irb2x unique (last_name)
    2020-06-11 19:05:25 - 
    
        alter table raw_item 
           drop constraint if exists UKglpy5hi0nls6mhkcxpw6n8503
    2020-06-11 19:05:25 - 
    
        alter table raw_item 
           add constraint UKglpy5hi0nls6mhkcxpw6n8503 unique (itemid)
    2020-06-11 19:05:25 - 
    
        alter table raw_item 
           drop constraint if exists UK_sqhmohafu04jvwfkhkc2k84fr
    2020-06-11 19:05:25 - 
    
        alter table raw_item 
           add constraint UK_sqhmohafu04jvwfkhkc2k84fr unique (item_name)
    2020-06-11 19:05:25 - 
    
        alter table regulator 
           drop constraint if exists UKiim3poi4o2q61dw86ii1bg30w
    2020-06-11 19:05:25 - 
    
        alter table regulator 
           add constraint UKiim3poi4o2q61dw86ii1bg30w unique (last_name, first_name)
    2020-06-11 19:05:25 - 
    
        alter table regulator 
           drop constraint if exists UK_ggk93790o3f71axji1uef2bbl
    2020-06-11 19:05:25 - 
    
        alter table regulator 
           add constraint UK_ggk93790o3f71axji1uef2bbl unique (agency)
    2020-06-11 19:05:25 - 
    
        alter table regulator 
           drop constraint if exists UK_94s6c2q82qde1vvrxf10blwdp
    2020-06-11 19:05:25 - 
    
        alter table regulator 
           add constraint UK_94s6c2q82qde1vvrxf10blwdp unique (regulatorid)
    2020-06-11 19:05:25 - 
    
        alter table store 
           drop constraint if exists UKmwicjgpv36mj36ktnv70cihix
    2020-06-11 19:05:25 - 
    
        alter table store 
           add constraint UKmwicjgpv36mj36ktnv70cihix unique (storeid)
    2020-06-11 19:05:25 - 
    
        alter table store 
           drop constraint if exists UK_sgv7034urjkrsq9v914ruc70n
    2020-06-11 19:05:25 - 
    
        alter table store 
           add constraint UK_sgv7034urjkrsq9v914ruc70n unique (location)
    2020-06-11 19:05:25 - 
    
        alter table store 
           drop constraint if exists UK_t628hr0thqcknea2eb14y58jp
    2020-06-11 19:05:25 - 
    
        alter table store 
           add constraint UK_t628hr0thqcknea2eb14y58jp unique (phone)
    2020-06-11 19:05:25 - 
    
        alter table supplier 
           drop constraint if exists UKtlmhbkp5j7b6wcx66rdksgbbn
    2020-06-11 19:05:25 - 
    
        alter table supplier 
           add constraint UKtlmhbkp5j7b6wcx66rdksgbbn unique (supplierid)
    2020-06-11 19:05:25 - 
    
        alter table supplier 
           drop constraint if exists UK_g7qiwwu4vpciysmeeyme9gg1d
    2020-06-11 19:05:25 - 
    
        alter table supplier 
           add constraint UK_g7qiwwu4vpciysmeeyme9gg1d unique (email)
    2020-06-11 19:05:25 - 
    
        alter table supplier 
           drop constraint if exists UK_odw8hcb1lettg4mqax263yyb5
    2020-06-11 19:05:25 - 
    
        alter table supplier 
           add constraint UK_odw8hcb1lettg4mqax263yyb5 unique (phone)
    2020-06-11 19:05:25 - 
    
        alter table supply_contract 
           drop constraint if exists UK3vgl9l4d7ndv3i7njcyifhenn
    2020-06-11 19:05:25 - 
    
        alter table supply_contract 
           add constraint UK3vgl9l4d7ndv3i7njcyifhenn unique (contractid)
    2020-06-11 19:05:25 - 
    
        alter table address 
           add constraint FK81ihijcn1kdfwffke0c0sjqeb 
           foreign key (person_id) 
           references person
    2020-06-11 19:05:25 - 
    
        alter table audit 
           add constraint FKqqla6mr0dqkcrp95lpge233fa 
           foreign key (regulator_id) 
           references regulator
    2020-06-11 19:05:25 - 
    
        alter table audit 
           add constraint FKb1grfs42thryxjen70htyfc6q 
           foreign key (store_id) 
           references store
    2020-06-11 19:05:25 - 
    
        alter table employee 
           add constraint FKtgbqs6uc58uf9ybapljkdw3ft 
           foreign key (storeid) 
           references store
    2020-06-11 19:05:25 - 
    
        alter table inventory 
           add constraint FKjel0fduy1umknciew4cvyml2c 
           foreign key (store) 
           references store (storeid)
    2020-06-11 19:05:25 - 
    
        alter table inventory_entry 
           add constraint FKra804e6gbcbgvsb1mlw741nns 
           foreign key (inventory) 
           references inventory
    2020-06-11 19:05:25 - 
    
        alter table inventory_entry 
           add constraint FKq1uhgsykuf78djaunk4mo5bvk 
           foreign key (packaged_item) 
           references packaged_item (itemid)
    2020-06-11 19:05:25 - 
    
        alter table inventory_entry 
           add constraint FKgkw37qnmvfshplxk6q5hk8qui 
           foreign key (raw_item) 
           references raw_item (itemid)
    2020-06-11 19:05:25 - 
    
        alter table owner 
           add constraint FKnqcr3duilytx6a5x1g9a16fre 
           foreign key (manager) 
           references loc_mgr
    2020-06-11 19:05:25 - 
    
        alter table recipes 
           add constraint FKs5mm941dbt09p1hfodvkfw4hh 
           foreign key (rawitem_id) 
           references raw_item
    2020-06-11 19:05:25 - 
    
        alter table recipes 
           add constraint FKexf5sjgtygyhe0pxl8csjjhv7 
           foreign key (prepareditem_id) 
           references prepared_item
    2020-06-11 19:05:25 - 
    
        alter table store 
           add constraint FKkexn9ju7n6renxjhmd3lpm4rv 
           foreign key (manager) 
           references loc_mgr
    2020-06-11 19:05:25 - 
    
        alter table store 
           add constraint FKrbk5w58pfolgn0gilf1dseh47 
           foreign key (owner) 
           references owner
    2020-06-11 19:05:25 - 
    
        alter table supply_contract 
           add constraint FK1wni75n290ja07cxs1jg3byde 
           foreign key (packaged_item) 
           references packaged_item (itemid)
    2020-06-11 19:05:25 - 
    
        alter table supply_contract 
           add constraint FKjsx88cjg04kfcha6twx6udox8 
           foreign key (raw_item) 
           references raw_item (itemid)
    2020-06-11 19:05:25 - 
    
        alter table supply_contract 
           add constraint FKpqjt3ib5ml4fi38xvb1u98yni 
           foreign key (store_supplied) 
           references store (storeid)
    2020-06-11 19:05:25 - 
    
        alter table supply_contract 
           add constraint FKecfwadtr8g2i6vw3rowm1s7hp 
           foreign key (supplier) 
           references supplier
    2020-06-11 19:05:26 - Started Demo2 in 0.983 seconds (JVM running for 7.888)

csc366.jpademo.Demo2 > testSaveRegulator() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - Regulator[test,test,test@,null,boss,audits=[]]

csc366.jpademo.Demo2 > testSaveRegulator() PASSED

csc366.jpademo.Demo2 > testGetRegulator() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo2 > testGetRegulator() PASSED

csc366.jpademo.Demo2 > testDeleteRegulator() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - 
        delete 
        from
            regulator 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo2 > testDeleteRegulator() PASSED

csc366.jpademo.Demo2 > testFindAllRegulator() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_

csc366.jpademo.Demo2 > testFindAllRegulator() PASSED

csc366.jpademo.Demo2 > testDeletByRegulatorId() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - 
        delete 
        from
            regulator 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo2 > testDeletByRegulatorId() PASSED

csc366.jpademo.Demo2 > testJpqlFinder() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=? 
            or regulator0_.last_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo2 > testJpqlFinder() PASSED

csc366.jpademo.Demo2 > testSqlFinder() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test@]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [boss]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - 
        select
            * 
        from
            Regulator as o 
        where
            o.first_name = ? 
            or o.last_name = ?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo2 > testSqlFinder() PASSED

csc366.jpademo.PreparedItemTests > testSavePreparedItemAndGetByName() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [1.1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One pound of raw macaroni noodles]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Noodles]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [3.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One half pound of cheddar cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem1]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Cheddar Cheese]
    2020-06-11 19:05:26 - 
        insert 
        into
            prepared_item
            (itemid, item_cost, item_description, item_name, prep_time_min) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [2.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [A bowl of Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [4] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [1]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [1]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [1]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [2]
    2020-06-11 19:05:26 - 
        select
            preparedit0_.itemid as itemid1_9_,
            preparedit0_.item_cost as item_cos2_9_,
            preparedit0_.item_description as item_des3_9_,
            preparedit0_.item_name as item_nam4_9_,
            preparedit0_.prep_time_min as prep_tim5_9_ 
        from
            prepared_item preparedit0_ 
        where
            preparedit0_.item_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - PreparedItem[1,Mac and Cheese,2.50,A bowl of Mac and Cheese,5,[Supplier[rawitem0,Noodles,1.1,One pound of raw macaroni noodles], Supplier[rawitem1,Cheddar Cheese,3.5,One half pound of cheddar cheese]]]

csc366.jpademo.PreparedItemTests > testSavePreparedItemAndGetByName() PASSED

csc366.jpademo.PreparedItemTests > testGetIngredientsByItemName() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [1.1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One pound of raw macaroni noodles]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Noodles]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [3.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One half pound of cheddar cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem1]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Cheddar Cheese]
    2020-06-11 19:05:26 - 
        insert 
        into
            prepared_item
            (itemid, item_cost, item_description, item_name, prep_time_min) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [2.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [A bowl of Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [4] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [2]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [3]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [2]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [4]
    2020-06-11 19:05:26 - 
        select
            preparedit0_.itemid as itemid1_9_,
            preparedit0_.item_cost as item_cos2_9_,
            preparedit0_.item_description as item_des3_9_,
            preparedit0_.item_name as item_nam4_9_,
            preparedit0_.prep_time_min as prep_tim5_9_ 
        from
            prepared_item preparedit0_ 
        where
            preparedit0_.item_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Mac and Cheese]

csc366.jpademo.PreparedItemTests > testGetIngredientsByItemName() PASSED

csc366.jpademo.PreparedItemTests > testDeletePreparedItem() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [1.1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One pound of raw macaroni noodles]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Noodles]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [3.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One half pound of cheddar cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem1]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Cheddar Cheese]
    2020-06-11 19:05:26 - 
        insert 
        into
            prepared_item
            (itemid, item_cost, item_description, item_name, prep_time_min) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [2.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [A bowl of Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [4] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [3]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [3]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [6]
    2020-06-11 19:05:26 - 
        delete 
        from
            recipes 
        where
            prepareditem_id=?
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [3]
    2020-06-11 19:05:26 - 
        delete 
        from
            prepared_item 
        where
            itemid=?
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [3]

csc366.jpademo.PreparedItemTests > testDeletePreparedItem() PASSED

csc366.jpademo.PreparedItemTests > testFindAllPreparedItems() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [1.1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One pound of raw macaroni noodles]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Noodles]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [3.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One half pound of cheddar cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem1]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Cheddar Cheese]
    2020-06-11 19:05:26 - 
        insert 
        into
            prepared_item
            (itemid, item_cost, item_description, item_name, prep_time_min) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [2.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [A bowl of Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [4] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [4]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [7]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [4]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [8]
    2020-06-11 19:05:26 - 
        select
            preparedit0_.itemid as itemid1_9_,
            preparedit0_.item_cost as item_cos2_9_,
            preparedit0_.item_description as item_des3_9_,
            preparedit0_.item_name as item_nam4_9_,
            preparedit0_.prep_time_min as prep_tim5_9_ 
        from
            prepared_item preparedit0_

csc366.jpademo.PreparedItemTests > testFindAllPreparedItems() PASSED

csc366.jpademo.PreparedItemTests > testPreparedItemModifiers() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [1.1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One pound of raw macaroni noodles]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Noodles]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [3.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One half pound of cheddar cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem1]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Cheddar Cheese]
    2020-06-11 19:05:26 - 
        insert 
        into
            prepared_item
            (itemid, item_cost, item_description, item_name, prep_time_min) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [2.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [A bowl of Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [4] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [5]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [9]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [5]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [10]
    2020-06-11 19:05:26 - 
        select
            preparedit0_.itemid as itemid1_9_,
            preparedit0_.item_cost as item_cos2_9_,
            preparedit0_.item_description as item_des3_9_,
            preparedit0_.item_name as item_nam4_9_,
            preparedit0_.prep_time_min as prep_tim5_9_ 
        from
            prepared_item preparedit0_ 
        where
            preparedit0_.item_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [0.0]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - 
        update
            prepared_item 
        set
            item_cost=?,
            item_description=?,
            item_name=?,
            prep_time_min=? 
        where
            itemid=?
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [-1.0]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [4] as [INTEGER] - [-1]
    2020-06-11 19:05:26 - binding parameter [5] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        delete 
        from
            recipes 
        where
            prepareditem_id=?
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [5]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [9]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [5]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [10]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [5]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [11]
    2020-06-11 19:05:26 - 
        select
            preparedit0_.itemid as itemid1_9_,
            preparedit0_.item_cost as item_cos2_9_,
            preparedit0_.item_description as item_des3_9_,
            preparedit0_.item_name as item_nam4_9_,
            preparedit0_.prep_time_min as prep_tim5_9_ 
        from
            prepared_item preparedit0_ 
        where
            preparedit0_.item_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [T]

csc366.jpademo.PreparedItemTests > testPreparedItemModifiers() PASSED

csc366.jpademo.PreparedItemTests > testFindUsingJpql() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [1.1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One pound of raw macaroni noodles]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Noodles]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [3.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One half pound of cheddar cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem1]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Cheddar Cheese]
    2020-06-11 19:05:26 - 
        insert 
        into
            prepared_item
            (itemid, item_cost, item_description, item_name, prep_time_min) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [2.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [A bowl of Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [Mac and Cheese]
    2020-06-11 19:05:26 - binding parameter [4] as [INTEGER] - [5]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [6]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [12]
    2020-06-11 19:05:26 - 
        insert 
        into
            recipes
            (prepareditem_id, rawitem_id) 
        values
            (?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [INTEGER] - [6]
    2020-06-11 19:05:26 - binding parameter [2] as [BIGINT] - [13]
    2020-06-11 19:05:26 - 
        select
            preparedit0_.itemid as itemid1_9_,
            preparedit0_.item_cost as item_cos2_9_,
            preparedit0_.item_description as item_des3_9_,
            preparedit0_.item_name as item_nam4_9_,
            preparedit0_.prep_time_min as prep_tim5_9_ 
        from
            prepared_item preparedit0_ 
        where
            preparedit0_.item_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Mac and Cheese]

csc366.jpademo.PreparedItemTests > testFindUsingJpql() PASSED

csc366.jpademo.SupplyContractTests > testSaveSupplyContract() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Glendale]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [860-345-1920]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [Large]
    2020-06-11 19:05:26 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:26 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_item, raw_item, start_date, store_supplied, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - binding parameter [2] as [INTEGER] - [20]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-11 19:05:26 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-11 19:05:26 - binding parameter [8] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [9] as [BIGINT] - [1]
    2020-06-11 19:05:26 - 
        select
            supplycont0_.id as id1_15_,
            supplycont0_.contractid as contract2_15_,
            supplycont0_.delivery_amount as delivery3_15_,
            supplycont0_.delivery_frequency as delivery4_15_,
            supplycont0_.end_date as end_date5_15_,
            supplycont0_.packaged_item as packaged7_15_,
            supplycont0_.raw_item as raw_item8_15_,
            supplycont0_.start_date as start_da6_15_,
            supplycont0_.store_supplied as store_su9_15_,
            supplycont0_.supplier as supplie10_15_ 
        from
            supply_contract supplycont0_ 
        where
            supplycont0_.contractid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - SupplyContract[contract0,weekly,20,2019-04-13,2020-04-14,Milk]

csc366.jpademo.SupplyContractTests > testSaveSupplyContract() PASSED

csc366.jpademo.SupplyContractTests > testGetSupplyContract() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Glendale]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [860-345-1920]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [Large]
    2020-06-11 19:05:26 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:26 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_item, raw_item, start_date, store_supplied, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - binding parameter [2] as [INTEGER] - [20]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-11 19:05:26 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-11 19:05:26 - binding parameter [8] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [9] as [BIGINT] - [2]
    2020-06-11 19:05:26 - 
        select
            supplycont0_.id as id1_15_,
            supplycont0_.contractid as contract2_15_,
            supplycont0_.delivery_amount as delivery3_15_,
            supplycont0_.delivery_frequency as delivery4_15_,
            supplycont0_.end_date as end_date5_15_,
            supplycont0_.packaged_item as packaged7_15_,
            supplycont0_.raw_item as raw_item8_15_,
            supplycont0_.start_date as start_da6_15_,
            supplycont0_.store_supplied as store_su9_15_,
            supplycont0_.supplier as supplie10_15_ 
        from
            supply_contract supplycont0_ 
        where
            supplycont0_.contractid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]

csc366.jpademo.SupplyContractTests > testGetSupplyContract() PASSED

csc366.jpademo.SupplyContractTests > testDeleteSupplyContract() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Glendale]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [860-345-1920]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [Large]
    2020-06-11 19:05:26 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:26 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_item, raw_item, start_date, store_supplied, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - binding parameter [2] as [INTEGER] - [20]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-11 19:05:26 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-11 19:05:26 - binding parameter [8] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [9] as [BIGINT] - [3]
    2020-06-11 19:05:26 - 
        delete 
        from
            supply_contract 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [3]
    2020-06-11 19:05:26 - 
        delete 
        from
            raw_item 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [16]
    2020-06-11 19:05:26 - 
        delete 
        from
            store 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [3]
    2020-06-11 19:05:26 - 
        delete 
        from
            supplier 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.SupplyContractTests > testDeleteSupplyContract() PASSED

csc366.jpademo.SupplyContractTests > testFindAllSupplyContracts() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Glendale]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [860-345-1920]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [Large]
    2020-06-11 19:05:26 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:26 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_item, raw_item, start_date, store_supplied, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - binding parameter [2] as [INTEGER] - [20]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-11 19:05:26 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-11 19:05:26 - binding parameter [8] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [9] as [BIGINT] - [4]
    2020-06-11 19:05:26 - 
        select
            supplycont0_.id as id1_15_,
            supplycont0_.contractid as contract2_15_,
            supplycont0_.delivery_amount as delivery3_15_,
            supplycont0_.delivery_frequency as delivery4_15_,
            supplycont0_.end_date as end_date5_15_,
            supplycont0_.packaged_item as packaged7_15_,
            supplycont0_.raw_item as raw_item8_15_,
            supplycont0_.start_date as start_da6_15_,
            supplycont0_.store_supplied as store_su9_15_,
            supplycont0_.supplier as supplie10_15_ 
        from
            supply_contract supplycont0_

csc366.jpademo.SupplyContractTests > testFindAllSupplyContracts() PASSED

csc366.jpademo.SupplyContractTests > testSupplyContractModifiers() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Glendale]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [860-345-1920]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [Large]
    2020-06-11 19:05:26 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:26 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_item, raw_item, start_date, store_supplied, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - binding parameter [2] as [INTEGER] - [20]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-11 19:05:26 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-11 19:05:26 - binding parameter [8] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [9] as [BIGINT] - [5]
    2020-06-11 19:05:26 - 
        select
            supplycont0_.id as id1_15_,
            supplycont0_.contractid as contract2_15_,
            supplycont0_.delivery_amount as delivery3_15_,
            supplycont0_.delivery_frequency as delivery4_15_,
            supplycont0_.end_date as end_date5_15_,
            supplycont0_.packaged_item as packaged7_15_,
            supplycont0_.raw_item as raw_item8_15_,
            supplycont0_.start_date as start_da6_15_,
            supplycont0_.store_supplied as store_su9_15_,
            supplycont0_.supplier as supplie10_15_ 
        from
            supply_contract supplycont0_ 
        where
            supplycont0_.contractid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [0.0]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [0.0]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - 
        update
            supply_contract 
        set
            contractid=?,
            delivery_amount=?,
            delivery_frequency=?,
            end_date=?,
            packaged_item=?,
            raw_item=?,
            start_date=?,
            store_supplied=?,
            supplier=? 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - binding parameter [2] as [INTEGER] - [9999]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test frequency]
    2020-06-11 19:05:26 - binding parameter [4] as [TIMESTAMP] - [Sat Nov 11 00:00:00 PST 1111]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [7] as [TIMESTAMP] - [Sun Nov 30 00:00:00 PST 2]
    2020-06-11 19:05:26 - binding parameter [8] as [VARCHAR] - [T]
    2020-06-11 19:05:26 - binding parameter [9] as [BIGINT] - [6]
    2020-06-11 19:05:26 - binding parameter [10] as [BIGINT] - [5]
    2020-06-11 19:05:26 - 
        select
            supplycont0_.id as id1_15_,
            supplycont0_.contractid as contract2_15_,
            supplycont0_.delivery_amount as delivery3_15_,
            supplycont0_.delivery_frequency as delivery4_15_,
            supplycont0_.end_date as end_date5_15_,
            supplycont0_.packaged_item as packaged7_15_,
            supplycont0_.raw_item as raw_item8_15_,
            supplycont0_.start_date as start_da6_15_,
            supplycont0_.store_supplied as store_su9_15_,
            supplycont0_.supplier as supplie10_15_ 
        from
            supply_contract supplycont0_ 
        where
            supplycont0_.contractid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]

csc366.jpademo.SupplyContractTests > testSupplyContractModifiers() PASSED

csc366.jpademo.SupplyContractTests > testFindUsingJpql() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Glendale]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [860-345-1920]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [Large]
    2020-06-11 19:05:26 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:26 - 
        insert 
        into
            supply_contract
            (id, contractid, delivery_amount, delivery_frequency, end_date, packaged_item, raw_item, start_date, store_supplied, supplier) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]
    2020-06-11 19:05:26 - binding parameter [2] as [INTEGER] - [20]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [weekly]
    2020-06-11 19:05:26 - binding parameter [4] as [TIMESTAMP] - [Tue Apr 14 00:00:00 PDT 2020]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [7] as [TIMESTAMP] - [Sat Apr 13 00:00:00 PDT 2019]
    2020-06-11 19:05:26 - binding parameter [8] as [VARCHAR] - [store0]
    2020-06-11 19:05:26 - binding parameter [9] as [BIGINT] - [7]
    2020-06-11 19:05:26 - 
        select
            supplycont0_.id as id1_15_,
            supplycont0_.contractid as contract2_15_,
            supplycont0_.delivery_amount as delivery3_15_,
            supplycont0_.delivery_frequency as delivery4_15_,
            supplycont0_.end_date as end_date5_15_,
            supplycont0_.packaged_item as packaged7_15_,
            supplycont0_.raw_item as raw_item8_15_,
            supplycont0_.start_date as start_da6_15_,
            supplycont0_.store_supplied as store_su9_15_,
            supplycont0_.supplier as supplie10_15_ 
        from
            supply_contract supplycont0_ 
        where
            supplycont0_.contractid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [contract0]

csc366.jpademo.SupplyContractTests > testFindUsingJpql() PASSED

csc366.jpademo.RawItemTests > testSaveRawItem() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.item_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - Supplier[rawitem0,Milk,8.5,One gallon of whole milk]

csc366.jpademo.RawItemTests > testSaveRawItem() PASSED

csc366.jpademo.RawItemTests > testGetFromItemID() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.itemid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [rawitem0]

csc366.jpademo.RawItemTests > testGetFromItemID() PASSED

csc366.jpademo.RawItemTests > testDeleteRawItem() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        delete 
        from
            raw_item 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [23]

csc366.jpademo.RawItemTests > testDeleteRawItem() PASSED

csc366.jpademo.RawItemTests > testFindAllRawItems() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:26 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_

csc366.jpademo.RawItemTests > testFindAllRawItems() PASSED

csc366.jpademo.Demo4 > testSaveOwner() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:26 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:26 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - Owner[test,test,test@calpoly.edu,123-45-6789,02/02/77,123-456-7890,stores=[]]

csc366.jpademo.Demo4 > testSaveOwner() PASSED

csc366.jpademo.Demo4 > testGetOwner() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:26 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:26 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo4 > testGetOwner() PASSED

csc366.jpademo.Demo4 > testDeleteOwner() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:26 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:26 - 
        delete 
        from
            owner 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo4 > testDeleteOwner() PASSED

csc366.jpademo.Demo4 > testFindAllOwners() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:26 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:26 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_

csc366.jpademo.Demo4 > testFindAllOwners() PASSED

csc366.jpademo.Demo4 > testDeletByOwnerId() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:26 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:26 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - 
        delete 
        from
            owner 
        where
            id=?
    2020-06-11 19:05:26 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo4 > testDeletByOwnerId() PASSED

csc366.jpademo.Demo4 > testJpqlFinder() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:26 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:26 - 
        select
            owner0_.id as id1_6_,
            owner0_.dob as dob2_6_,
            owner0_.email as email3_6_,
            owner0_.first_name as first_na4_6_,
            owner0_.last_name as last_nam5_6_,
            owner0_.manager as manager8_6_,
            owner0_.phone as phone6_6_,
            owner0_.ssn as ssn7_6_ 
        from
            owner owner0_ 
        where
            owner0_.first_name=? 
            or owner0_.last_name=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo4 > testJpqlFinder() PASSED

csc366.jpademo.Demo4 > testSqlFinder() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            owner
            (id, dob, email, first_name, last_name, manager, phone, ssn) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [02/02/77]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [123-456-7890]
    2020-06-11 19:05:26 - binding parameter [7] as [VARCHAR] - [123-45-6789]
    2020-06-11 19:05:26 - 
        select
            * 
        from
            Owner as o 
        where
            o.first_name = ? 
            or o.last_name = ?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo4 > testSqlFinder() PASSED

csc366.jpademo.Demo9 > testStoreAndAudit() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:26 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:26 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [5] as [BIGINT] - [7]
    2020-06-11 19:05:26 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-11 19:05:26 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[1,audit1,123,safety]]]

csc366.jpademo.Demo9 > testStoreAndAudit() PASSED

csc366.jpademo.Demo9 > testStoreAuditQuery() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:26 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:26 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [5] as [BIGINT] - [8]
    2020-06-11 19:05:26 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Store1]

csc366.jpademo.Demo9 > testStoreAuditQuery() PASSED

csc366.jpademo.Demo9 > testStoreAudit() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:26 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:26 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [5] as [BIGINT] - [9]
    2020-06-11 19:05:26 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-11 19:05:26 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]

csc366.jpademo.Demo9 > testStoreAudit() PASSED

csc366.jpademo.Demo9 > testRemoveAuditAndFlush() STANDARD_OUT
    2020-06-11 19:05:26 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:26 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:26 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:26 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:26 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:26 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:26 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:26 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:26 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:26 - binding parameter [5] as [BIGINT] - [10]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-11 19:05:27 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [4]
    2020-06-11 19:05:27 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[]]

csc366.jpademo.Demo9 > testRemoveAuditAndFlush() PASSED

csc366.jpademo.Demo9 > testJpqlJoin() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [11]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        inner join
            audit audits1_ 
                on store0_.id=audits1_.store_id 
        where
            store0_.storeid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-11 19:05:27 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[5,audit1,123,safety]]]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit2]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Quality]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [321]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [11]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        inner join
            audit audits1_ 
                on store0_.id=audits1_.store_id 
        where
            store0_.storeid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Store1]
    2020-06-11 19:05:27 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[5,audit1,123,safety], Audit[6,audit2,321,Quality]]]

csc366.jpademo.Demo9 > testJpqlJoin() PASSED

csc366.jpademo.Demo0 > testSavePerson() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - Person[1,test,test,addresses=[]]

csc366.jpademo.Demo0 > testSavePerson() PASSED

csc366.jpademo.Demo0 > testGetPerson() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo0 > testGetPerson() PASSED

csc366.jpademo.Demo0 > testDeletePerson() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        delete 
        from
            person 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo0 > testDeletePerson() PASSED

csc366.jpademo.Demo0 > testFindAllPersons() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_

csc366.jpademo.Demo0 > testFindAllPersons() PASSED

csc366.jpademo.Demo0 > testDeletByPersonId() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        delete 
        from
            person 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo0 > testDeletByPersonId() PASSED

csc366.jpademo.Demo0 > testJpqlFinder() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=? 
            or person0_.last_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo0 > testJpqlFinder() PASSED

csc366.jpademo.Demo0 > testSqlFinder() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        select
            * 
        from
            person as p 
        where
            p.first_name = ? 
            or p.last_name = ?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]

csc366.jpademo.Demo0 > testSqlFinder() PASSED

csc366.jpademo.Demo7 > testAuditRegulatorAndStore() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - Store[Store1,1234567890,123 Center Dr,200 sqft,audits=[Audit[7,audit1,123,safety]]]
    2020-06-11 19:05:27 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[7,audit1,123,safety]]]

csc366.jpademo.Demo7 > testAuditRegulatorAndStore() PASSED

csc366.jpademo.Demo7 > testAuditStoreQuery() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]

csc366.jpademo.Demo7 > testAuditStoreQuery() PASSED

csc366.jpademo.Demo7 > testJpqlJoin() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [123 Center Dr]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [Store1]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 sqft]
    2020-06-11 19:05:27 - 
        update
            audit 
        set
            auditid=?,
            audit_type=?,
            date=?,
            regulator_id=?,
            store_id=? 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [12]
    2020-06-11 19:05:27 - binding parameter [6] as [BIGINT] - [9]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        inner join
            store store1_ 
                on audit0_.store_id=store1_.id 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - Audit[9,audit1,123,safety]

csc366.jpademo.Demo7 > testJpqlJoin() PASSED

csc366.jpademo.Demo7 > testJpqlJoin2() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - 
        update
            audit 
        set
            auditid=?,
            audit_type=?,
            date=?,
            regulator_id=?,
            store_id=? 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [1]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [6] as [BIGINT] - [10]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        inner join
            regulator regulator1_ 
                on audit0_.regulator_id=regulator1_.id 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - Audit[10,audit1,123,safety]

csc366.jpademo.Demo7 > testJpqlJoin2() PASSED

csc366.jpademo.SupplierTests > testSaveSupplierAndGetByName() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:27 - 
        select
            supplier0_.id as id1_14_,
            supplier0_.email as email2_14_,
            supplier0_.phone as phone3_14_,
            supplier0_.supplierid as supplier4_14_,
            supplier0_.supplier_name as supplier5_14_,
            supplier0_.supplier_type as supplier6_14_ 
        from
            supplier supplier0_ 
        where
            supplier0_.supplier_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:27 - Supplier[supplier0,Joshua Farms,dairy,203-897-1033,jfarms991@gmail.com]

csc366.jpademo.SupplierTests > testSaveSupplierAndGetByName() PASSED

csc366.jpademo.SupplierTests > testGetSupplierByID() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:27 - 
        select
            supplier0_.id as id1_14_,
            supplier0_.email as email2_14_,
            supplier0_.phone as phone3_14_,
            supplier0_.supplierid as supplier4_14_,
            supplier0_.supplier_name as supplier5_14_,
            supplier0_.supplier_type as supplier6_14_ 
        from
            supplier supplier0_ 
        where
            supplier0_.supplierid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [supplier0]

csc366.jpademo.SupplierTests > testGetSupplierByID() PASSED

csc366.jpademo.SupplierTests > testDeleteSupplier() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:27 - 
        delete 
        from
            supplier 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [10]

csc366.jpademo.SupplierTests > testDeleteSupplier() PASSED

csc366.jpademo.SupplierTests > testFindAllSuppliers() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:27 - 
        select
            supplier0_.id as id1_14_,
            supplier0_.email as email2_14_,
            supplier0_.phone as phone3_14_,
            supplier0_.supplierid as supplier4_14_,
            supplier0_.supplier_name as supplier5_14_,
            supplier0_.supplier_type as supplier6_14_ 
        from
            supplier supplier0_

csc366.jpademo.SupplierTests > testFindAllSuppliers() PASSED

csc366.jpademo.SupplierTests > testSupplierModifiers() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:27 - 
        select
            supplier0_.id as id1_14_,
            supplier0_.email as email2_14_,
            supplier0_.phone as phone3_14_,
            supplier0_.supplierid as supplier4_14_,
            supplier0_.supplier_name as supplier5_14_,
            supplier0_.supplier_type as supplier6_14_ 
        from
            supplier supplier0_ 
        where
            supplier0_.supplierid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - 
        update
            supplier 
        set
            email=?,
            phone=?,
            supplierid=?,
            supplier_name=?,
            supplier_type=? 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@gmail.com]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [999-888-7777]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [test supplier]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test type]
    2020-06-11 19:05:27 - binding parameter [6] as [BIGINT] - [12]
    2020-06-11 19:05:27 - 
        select
            supplier0_.id as id1_14_,
            supplier0_.email as email2_14_,
            supplier0_.phone as phone3_14_,
            supplier0_.supplierid as supplier4_14_,
            supplier0_.supplier_name as supplier5_14_,
            supplier0_.supplier_type as supplier6_14_ 
        from
            supplier supplier0_ 
        where
            supplier0_.supplierid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [supplier0]

csc366.jpademo.SupplierTests > testSupplierModifiers() PASSED

csc366.jpademo.SupplierTests > testFindUsingJpql() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            supplier
            (id, email, phone, supplierid, supplier_name, supplier_type) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jfarms991@gmail.com]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [203-897-1033]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [supplier0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Joshua Farms]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [dairy]
    2020-06-11 19:05:27 - 
        select
            supplier0_.id as id1_14_,
            supplier0_.email as email2_14_,
            supplier0_.phone as phone3_14_,
            supplier0_.supplierid as supplier4_14_,
            supplier0_.supplier_name as supplier5_14_,
            supplier0_.supplier_type as supplier6_14_ 
        from
            supplier supplier0_ 
        where
            supplier0_.supplierid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [supplier0]

csc366.jpademo.SupplierTests > testFindUsingJpql() PASSED

csc366.jpademo.Demo1 > testPersonAndAddress() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-11 19:05:27 - binding parameter [2] as [BIGINT] - [1]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - Person[1,test,test,addresses=[Address[1,1 Grand Ave,SLO,CA,93407]]]

csc366.jpademo.Demo1 > testPersonAndAddress() PASSED

csc366.jpademo.Demo1 > testPersonAddressQuery() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-11 19:05:27 - binding parameter [2] as [BIGINT] - [2]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo1 > testPersonAddressQuery() PASSED

csc366.jpademo.Demo1 > testRemoveAddress() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-11 19:05:27 - binding parameter [2] as [BIGINT] - [3]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - Person[3,test,test,addresses=[]]

csc366.jpademo.Demo1 > testRemoveAddress() PASSED

csc366.jpademo.Demo1 > testRemoveAddressAndFlush() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-11 19:05:27 - binding parameter [2] as [BIGINT] - [4]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        where
            person0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        delete 
        from
            address 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [4]
    2020-06-11 19:05:27 - Person[4,test,test,addresses=[]]

csc366.jpademo.Demo1 > testRemoveAddressAndFlush() PASSED

csc366.jpademo.Demo1 > testJpqlJoin() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            person
            (id, email, first_name, last_name) 
        values
            (null, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test@calpoly.edu]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-11 19:05:27 - binding parameter [2] as [BIGINT] - [5]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1 Grand Ave]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [93407]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        inner join
            address addresses1_ 
                on person0_.id=addresses1_.person_id 
        where
            person0_.first_name=? 
            or person0_.last_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - Person[5,test,test,addresses=[Address[5,1 Grand Ave,SLO,CA,93407]]]
    2020-06-11 19:05:27 - 
        insert 
        into
            address
            (id, city, person_id, state, street, zip_code) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [SLO]
    2020-06-11 19:05:27 - binding parameter [2] as [BIGINT] - [5]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [CA]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [2 Grand Ave]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [93407-0002]
    2020-06-11 19:05:27 - 
        select
            person0_.id as id1_8_,
            person0_.email as email2_8_,
            person0_.first_name as first_na3_8_,
            person0_.last_name as last_nam4_8_ 
        from
            person person0_ 
        inner join
            address addresses1_ 
                on person0_.id=addresses1_.person_id 
        where
            person0_.first_name=? 
            or person0_.last_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - Person[5,test,test,addresses=[Address[5,1 Grand Ave,SLO,CA,93407], Address[6,2 Grand Ave,SLO,CA,93407-0002]]]

csc366.jpademo.Demo1 > testJpqlJoin() PASSED

csc366.jpademo.BasicItemTests > testSaveRawItemAndGetByID() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - Supplier[rawitem0,Milk,8.5,One gallon of whole milk]

csc366.jpademo.BasicItemTests > testSaveRawItemAndGetByID() PASSED

csc366.jpademo.BasicItemTests > testGetRawItemByID() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [rawitem0]

csc366.jpademo.BasicItemTests > testGetRawItemByID() PASSED

csc366.jpademo.BasicItemTests > testDeleteRawItem() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        delete 
        from
            raw_item 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [27]

csc366.jpademo.BasicItemTests > testDeleteRawItem() PASSED

csc366.jpademo.BasicItemTests > testFindAllRawItems() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_

csc366.jpademo.BasicItemTests > testFindAllRawItems() PASSED

csc366.jpademo.BasicItemTests > testRawItemModifiers() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - 
        update
            raw_item 
        set
            item_cost=?,
            item_description=?,
            itemid=?,
            item_name=? 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [-1.0]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [T]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [T]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [29]
    2020-06-11 19:05:27 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [rawitem0]

csc366.jpademo.BasicItemTests > testRawItemModifiers() PASSED

csc366.jpademo.BasicItemTests > testFindRawUsingJpql() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            rawitem0_.id as id1_10_,
            rawitem0_.item_cost as item_cos2_10_,
            rawitem0_.item_description as item_des3_10_,
            rawitem0_.itemid as itemid4_10_,
            rawitem0_.item_name as item_nam5_10_ 
        from
            raw_item rawitem0_ 
        where
            rawitem0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [rawitem0]

csc366.jpademo.BasicItemTests > testFindRawUsingJpql() PASSED

csc366.jpademo.BasicItemTests > testSavePackagedItemAndGetByID() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            packagedit0_.id as id1_7_,
            packagedit0_.item_cost as item_cos2_7_,
            packagedit0_.item_description as item_des3_7_,
            packagedit0_.itemid as itemid4_7_,
            packagedit0_.item_name as item_nam5_7_ 
        from
            packaged_item packagedit0_ 
        where
            packagedit0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - Supplier[packageditem0,Chips,1.5,One small bag of plain chips]

csc366.jpademo.BasicItemTests > testSavePackagedItemAndGetByID() PASSED

csc366.jpademo.BasicItemTests > testGetPackagedItemByID() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            packagedit0_.id as id1_7_,
            packagedit0_.item_cost as item_cos2_7_,
            packagedit0_.item_description as item_des3_7_,
            packagedit0_.itemid as itemid4_7_,
            packagedit0_.item_name as item_nam5_7_ 
        from
            packaged_item packagedit0_ 
        where
            packagedit0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [packageditem0]

csc366.jpademo.BasicItemTests > testGetPackagedItemByID() PASSED

csc366.jpademo.BasicItemTests > testDeletePackagedItem() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        delete 
        from
            packaged_item 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [10]

csc366.jpademo.BasicItemTests > testDeletePackagedItem() PASSED

csc366.jpademo.BasicItemTests > testFindAllPackagedItems() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            packagedit0_.id as id1_7_,
            packagedit0_.item_cost as item_cos2_7_,
            packagedit0_.item_description as item_des3_7_,
            packagedit0_.itemid as itemid4_7_,
            packagedit0_.item_name as item_nam5_7_ 
        from
            packaged_item packagedit0_

csc366.jpademo.BasicItemTests > testFindAllPackagedItems() PASSED

csc366.jpademo.BasicItemTests > testPackagedItemModifiers() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            packagedit0_.id as id1_7_,
            packagedit0_.item_cost as item_cos2_7_,
            packagedit0_.item_description as item_des3_7_,
            packagedit0_.itemid as itemid4_7_,
            packagedit0_.item_name as item_nam5_7_ 
        from
            packaged_item packagedit0_ 
        where
            packagedit0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - 
        update
            packaged_item 
        set
            item_cost=?,
            item_description=?,
            itemid=?,
            item_name=? 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [-1.0]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [T]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [T]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [12]
    2020-06-11 19:05:27 - 
        select
            packagedit0_.id as id1_7_,
            packagedit0_.item_cost as item_cos2_7_,
            packagedit0_.item_description as item_des3_7_,
            packagedit0_.itemid as itemid4_7_,
            packagedit0_.item_name as item_nam5_7_ 
        from
            packaged_item packagedit0_ 
        where
            packagedit0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [packageditem0]

csc366.jpademo.BasicItemTests > testPackagedItemModifiers() PASSED

csc366.jpademo.BasicItemTests > testFindPackagedUsingJpql() STANDARD_OUT
    2020-06-11 19:05:27 - Milk
    2020-06-11 19:05:27 - Chips
    2020-06-11 19:05:27 - 
        insert 
        into
            raw_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [8.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One gallon of whole milk]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [rawitem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Milk]
    2020-06-11 19:05:27 - 
        insert 
        into
            packaged_item
            (id, item_cost, item_description, itemid, item_name) 
        values
            (null, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DOUBLE] - [1.5]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [One small bag of plain chips]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [packageditem0]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Chips]
    2020-06-11 19:05:27 - 
        select
            packagedit0_.id as id1_7_,
            packagedit0_.item_cost as item_cos2_7_,
            packagedit0_.item_description as item_des3_7_,
            packagedit0_.itemid as itemid4_7_,
            packagedit0_.item_name as item_nam5_7_ 
        from
            packaged_item packagedit0_ 
        where
            packagedit0_.itemid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [packageditem0]

csc366.jpademo.BasicItemTests > testFindPackagedUsingJpql() PASSED

csc366.jpademo.EmployeeTests > testSaveEmployee() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            employee
            (id, date_of_birth, email, end_date, first_name, last_name, phone, ssn, start_date, storeid) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [jack@daniels.com]
    2020-06-11 19:05:27 - binding parameter [3] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Jack]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [Daniels]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [7] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [8] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [9] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            employee0_.id as id1_2_,
            employee0_.date_of_birth as date_of_2_2_,
            employee0_.email as email3_2_,
            employee0_.end_date as end_date4_2_,
            employee0_.first_name as first_na5_2_,
            employee0_.last_name as last_nam6_2_,
            employee0_.phone as phone7_2_,
            employee0_.ssn as ssn8_2_,
            employee0_.start_date as start_da9_2_,
            employee0_.storeid as storeid10_2_ 
        from
            employee employee0_ 
        where
            employee0_.email=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jack@daniels.com]
    2020-06-11 19:05:27 - csc366.jpademo.Employee@18344a82

csc366.jpademo.EmployeeTests > testSaveEmployee() PASSED

csc366.jpademo.EmployeeTests > testGetEmployee() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            employee
            (id, date_of_birth, email, end_date, first_name, last_name, phone, ssn, start_date, storeid) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [jack@daniels.com]
    2020-06-11 19:05:27 - binding parameter [3] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Jack]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [Daniels]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [7] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [8] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [9] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            employee0_.id as id1_2_,
            employee0_.date_of_birth as date_of_2_2_,
            employee0_.email as email3_2_,
            employee0_.end_date as end_date4_2_,
            employee0_.first_name as first_na5_2_,
            employee0_.last_name as last_nam6_2_,
            employee0_.phone as phone7_2_,
            employee0_.ssn as ssn8_2_,
            employee0_.start_date as start_da9_2_,
            employee0_.storeid as storeid10_2_ 
        from
            employee employee0_ 
        where
            employee0_.email=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jack@daniels.com]

csc366.jpademo.EmployeeTests > testGetEmployee() PASSED

csc366.jpademo.EmployeeTests > testDeleteEmployee() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            employee
            (id, date_of_birth, email, end_date, first_name, last_name, phone, ssn, start_date, storeid) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [jack@daniels.com]
    2020-06-11 19:05:27 - binding parameter [3] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Jack]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [Daniels]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [7] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [8] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [9] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        delete 
        from
            employee 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.EmployeeTests > testDeleteEmployee() PASSED

csc366.jpademo.EmployeeTests > testFindAllEmployees() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            employee
            (id, date_of_birth, email, end_date, first_name, last_name, phone, ssn, start_date, storeid) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [jack@daniels.com]
    2020-06-11 19:05:27 - binding parameter [3] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Jack]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [Daniels]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [7] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [8] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [9] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            employee0_.id as id1_2_,
            employee0_.date_of_birth as date_of_2_2_,
            employee0_.email as email3_2_,
            employee0_.end_date as end_date4_2_,
            employee0_.first_name as first_na5_2_,
            employee0_.last_name as last_nam6_2_,
            employee0_.phone as phone7_2_,
            employee0_.ssn as ssn8_2_,
            employee0_.start_date as start_da9_2_,
            employee0_.storeid as storeid10_2_ 
        from
            employee employee0_

csc366.jpademo.EmployeeTests > testFindAllEmployees() PASSED

csc366.jpademo.EmployeeTests > testDeleteEmployeeById() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            employee
            (id, date_of_birth, email, end_date, first_name, last_name, phone, ssn, start_date, storeid) 
        values
            (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [jack@daniels.com]
    2020-06-11 19:05:27 - binding parameter [3] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Jack]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [Daniels]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [7] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [8] as [DATE] - [null]
    2020-06-11 19:05:27 - binding parameter [9] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            employee0_.id as id1_2_,
            employee0_.date_of_birth as date_of_2_2_,
            employee0_.email as email3_2_,
            employee0_.end_date as end_date4_2_,
            employee0_.first_name as first_na5_2_,
            employee0_.last_name as last_nam6_2_,
            employee0_.phone as phone7_2_,
            employee0_.ssn as ssn8_2_,
            employee0_.start_date as start_da9_2_,
            employee0_.storeid as storeid10_2_ 
        from
            employee employee0_ 
        where
            employee0_.email=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [jack@daniels.com]
    2020-06-11 19:05:27 - 
        delete 
        from
            employee 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.EmployeeTests > testDeleteEmployeeById() PASSED

csc366.jpademo.Demo3 > testRegulatorAndAudit() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [2]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[11,audit1,123,safety]]]

csc366.jpademo.Demo3 > testRegulatorAndAudit() PASSED

csc366.jpademo.Demo3 > testRegulatorAuditQuery() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [3]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Jane]

csc366.jpademo.Demo3 > testRegulatorAuditQuery() PASSED

csc366.jpademo.Demo3 > testRemoveAudit() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [4]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[]]

csc366.jpademo.Demo3 > testRemoveAudit() PASSED

csc366.jpademo.Demo3 > testRemoveAuditAndFlush() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [5]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        where
            regulator0_.first_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [14]
    2020-06-11 19:05:27 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[]]

csc366.jpademo.Demo3 > testRemoveAuditAndFlush() PASSED

csc366.jpademo.Demo3 > testJpqlJoin() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            regulator
            (id, agency, first_name, last_name, position, regulatorid) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [IRS]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [Doe]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [Inspector]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit1]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [6]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        inner join
            audit audits1_ 
                on regulator0_.id=audits1_.regulator_id 
        where
            regulator0_.first_name=? 
            or regulator0_.last_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[15,audit1,123,safety]]]
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [audit2]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Quality]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [321]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [6]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            regulator0_.id as id1_12_,
            regulator0_.agency as agency2_12_,
            regulator0_.first_name as first_na3_12_,
            regulator0_.last_name as last_nam4_12_,
            regulator0_.position as position5_12_,
            regulator0_.regulatorid as regulato6_12_ 
        from
            regulator regulator0_ 
        inner join
            audit audits1_ 
                on regulator0_.id=audits1_.regulator_id 
        where
            regulator0_.first_name=? 
            or regulator0_.last_name=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [Jane]
    2020-06-11 19:05:27 - Regulator[Jane,Doe,IRS,null,Inspector,audits=[Audit[15,audit1,123,safety], Audit[16,audit2,321,Quality]]]

csc366.jpademo.Demo3 > testJpqlJoin() PASSED

csc366.jpademo.Demo6 > testSaveAudit() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - Audit[1,test,123,safety]

csc366.jpademo.Demo6 > testSaveAudit() PASSED

csc366.jpademo.Demo6 > testGetAudit() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo6 > testGetAudit() PASSED

csc366.jpademo.Demo6 > testDeleteAudit() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [3]

csc366.jpademo.Demo6 > testDeleteAudit() PASSED

csc366.jpademo.Demo6 > testFindAllAudit() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_

csc366.jpademo.Demo6 > testFindAllAudit() PASSED

csc366.jpademo.Demo6 > testDeletByAuditId() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        delete 
        from
            audit 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [5]

csc366.jpademo.Demo6 > testDeletByAuditId() PASSED

csc366.jpademo.Demo6 > testJpqlFinder() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            audit0_.id as id1_1_,
            audit0_.auditid as auditid2_1_,
            audit0_.audit_type as audit_ty3_1_,
            audit0_.date as date4_1_,
            audit0_.regulator_id as regulato5_1_,
            audit0_.store_id as store_id6_1_ 
        from
            audit audit0_ 
        where
            audit0_.auditid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo6 > testJpqlFinder() PASSED

csc366.jpademo.Demo6 > testSqlFinder() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            audit
            (id, auditid, audit_type, date, regulator_id, store_id) 
        values
            (null, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [safety]
    2020-06-11 19:05:27 - binding parameter [3] as [VARCHAR] - [123]
    2020-06-11 19:05:27 - binding parameter [4] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [5] as [BIGINT] - [null]
    2020-06-11 19:05:27 - 
        select
            * 
        from
            Audit as o 
        where
            o.auditID = ?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo6 > testSqlFinder() PASSED

csc366.jpademo.Demo8 > testSaveStore() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 ft]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - Store[test,1234567890,Center,200 ft,audits=[]]

csc366.jpademo.Demo8 > testSaveStore() PASSED

csc366.jpademo.Demo8 > testGetStore() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 ft]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo8 > testGetStore() PASSED

csc366.jpademo.Demo8 > testDeleteStore() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 ft]
    2020-06-11 19:05:27 - 
        delete 
        from
            store 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [10]

csc366.jpademo.Demo8 > testDeleteStore() PASSED

csc366.jpademo.Demo8 > testFindAllStore() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 ft]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_

csc366.jpademo.Demo8 > testFindAllStore() PASSED

csc366.jpademo.Demo8 > testDeletByStoreId() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 ft]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - 
        delete 
        from
            store 
        where
            id=?
    2020-06-11 19:05:27 - binding parameter [1] as [BIGINT] - [12]

csc366.jpademo.Demo8 > testDeletByStoreId() PASSED

csc366.jpademo.Demo8 > testJpqlFinder() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 ft]
    2020-06-11 19:05:27 - 
        select
            store0_.id as id1_13_,
            store0_.location as location2_13_,
            store0_.manager as manager6_13_,
            store0_.owner as owner7_13_,
            store0_.phone as phone3_13_,
            store0_.storeid as storeid4_13_,
            store0_.store_size as store_si5_13_ 
        from
            store store0_ 
        where
            store0_.storeid=?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo8 > testJpqlFinder() PASSED

csc366.jpademo.Demo8 > testSqlFinder() STANDARD_OUT
    2020-06-11 19:05:27 - 
        insert 
        into
            store
            (id, location, manager, owner, phone, storeid, store_size) 
        values
            (null, ?, ?, ?, ?, ?, ?)
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [Center]
    2020-06-11 19:05:27 - binding parameter [2] as [VARCHAR] - [null]
    2020-06-11 19:05:27 - binding parameter [3] as [BIGINT] - [null]
    2020-06-11 19:05:27 - binding parameter [4] as [VARCHAR] - [1234567890]
    2020-06-11 19:05:27 - binding parameter [5] as [VARCHAR] - [test]
    2020-06-11 19:05:27 - binding parameter [6] as [VARCHAR] - [200 ft]
    2020-06-11 19:05:27 - 
        select
            * 
        from
            Store as o 
        where
            o.storeID = ?
    2020-06-11 19:05:27 - binding parameter [1] as [VARCHAR] - [test]

csc366.jpademo.Demo8 > testSqlFinder() PASSED

BUILD SUCCESSFUL in 10s
4 actionable tasks: 3 executed, 1 up-to-date
